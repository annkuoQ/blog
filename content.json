{"meta":{"title":"AnnKuoQ Blog","subtitle":"一個擺放各種筆記的地方","description":"一個擺放各種筆記的地方","author":"AnnKuoQ","url":"https://annkuoq.github.io/blog","root":"/blog/"},"pages":[{"title":"關於我","date":"2020-02-28T13:49:46.893Z","updated":"2020-02-28T13:49:46.893Z","comments":true,"path":"about/index.html","permalink":"https://annkuoq.github.io/blog/about/","excerpt":"","text":"頭髮很捲的人 喜歡觀察 喜歡紀錄 喜歡無所事事"},{"title":"標籤","date":"2020-02-28T13:27:12.879Z","updated":"2020-02-28T13:27:12.879Z","comments":false,"path":"tags/index.html","permalink":"https://annkuoq.github.io/blog/tags/","excerpt":"","text":""},{"title":"文章類別","date":"2020-01-05T09:25:29.666Z","updated":"2020-01-05T09:25:29.666Z","comments":false,"path":"categories/index.html","permalink":"https://annkuoq.github.io/blog/categories/","excerpt":"","text":""}],"posts":[{"title":"如何在 Win10 Chrome 播放本機的 HLS M3U8 影片","slug":"how-to-play-local-hls-m3u8-in-windows-chrome","date":"2024-03-25T01:40:22.000Z","updated":"2024-03-25T12:23:29.330Z","comments":true,"path":"2024-03-25-how-to-play-local-hls-m3u8-in-windows-chrome/","link":"","permalink":"https://annkuoq.github.io/blog/2024-03-25-how-to-play-local-hls-m3u8-in-windows-chrome/","excerpt":"最近在測試 HLS 轉檔轉出來後有一堆 ts 片段又懶得上傳到 Staging 環境於是就想找在本機端可以播放影片的方法","text":"最近在測試 HLS 轉檔轉出來後有一堆 ts 片段又懶得上傳到 Staging 環境於是就想找在本機端可以播放影片的方法 首先先認識一下 HLS 是什麼 什麼是 HLSHLS 是一種串流媒體協定它把一個影片切成許多小片段使用者只需要下載所需片段就能觀看不需要等前面都載完然後播放器會偵測頻寬來選擇不同的畫質 檔案結構大概長這樣 1234567891011121314151617hls├─480p│ ├─01.ts│ ├─02.ts│ ├─03.ts│ └─playlist.m3u8├─720p│ ├─01.ts│ ├─02.ts│ ├─03.ts│ └─playlist.m3u8├─1080p│ ├─01.ts│ ├─02.ts│ ├─03.ts│ └─playlist.m3u8└─index.m3u8 第一層有一個 index.m3u8，記錄三種畫質的播放路徑第二層每個畫質資料夾都有一個 playlist.m3u8，記錄該畫質的播放路徑然後還有一些 .ts 小片段影片檔 如何播放 HLS我們將透過 Video.js 播放器來實作 前置準備 新增一個資料夾叫做 test 在 test 底下新增一個資料夾叫做 video 在 video 底下放入 hls 檔案 在根目錄新增一個 player.html 檔 檔案結構如下 12345678910111213141516test├─video│ ├─480p│ │ ├─01.ts│ │ ├─...ts│ │ └─playlist.m3u8│ ├─720p│ │ ├─01.ts│ │ ├─...ts│ │ └─playlist.m3u8│ ├─1080p│ │ ├─01.ts│ │ ├─...ts│ │ └─playlist.m3u8│ └─index.m3u8└─player.html 產生 player.html 檔html 檔內容如下 123456789101112131415161718&lt;!DOCTYPE html&gt;&lt;html lang&#x3D;&quot;en-us&quot;&gt; &lt;head&gt; &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt; &lt;link rel&#x3D;&quot;shortcut icon&quot; href&#x3D;&quot;#&quot;&gt; &lt;title&gt;HLS Player&lt;&#x2F;title&gt; &lt;link href&#x3D;&quot;https:&#x2F;&#x2F;vjs.zencdn.net&#x2F;8.10.0&#x2F;video-js.css&quot; rel&#x3D;&quot;stylesheet&quot;&gt; &lt;&#x2F;head&gt; &lt;body&gt; &lt;video id&#x3D;&quot;my-video&quot; class&#x3D;&quot;video-js&quot; controls preload&#x3D;&quot;auto&quot; width&#x3D;&quot;1280&quot; height&#x3D;&quot;720&quot; data-setup&#x3D;&quot;&#123;&#125;&quot;&gt; &lt;source src&#x3D;&quot;.&#x2F;video&#x2F;index.m3u8&quot; type&#x3D;&quot;application&#x2F;x-mpegURL&quot;&gt; &lt;&#x2F;video&gt; &lt;script src&#x3D;&quot;https:&#x2F;&#x2F;vjs.zencdn.net&#x2F;8.10.0&#x2F;video.min.js&quot;&gt;&lt;&#x2F;script&gt;&lt;&#x2F;body&gt;&lt;&#x2F;html&gt; 啟動 http-server 服務 安裝 http-server 教學 啟動服務 http-server . 8080 瀏覽器前往 http://127.0.0.1:8080/player.html 播放影片 目前播放器是自動偵測頻寬來給不同畫質不能在播放器上選擇畫質這個有空再研究 參考資料 Getting Started with Video.js","categories":[{"name":"直播 / 串流","slug":"直播-串流","permalink":"https://annkuoq.github.io/blog/categories/%E7%9B%B4%E6%92%AD-%E4%B8%B2%E6%B5%81/"}],"tags":[{"name":"http-server","slug":"http-server","permalink":"https://annkuoq.github.io/blog/tags/http-server/"},{"name":"hls","slug":"hls","permalink":"https://annkuoq.github.io/blog/tags/hls/"},{"name":"m3u8","slug":"m3u8","permalink":"https://annkuoq.github.io/blog/tags/m3u8/"}]},{"title":"介紹 VTuber 相關技術與軟體","slug":"how-to-be-a-vtuber","date":"2022-02-19T07:27:21.000Z","updated":"2022-02-19T16:00:08.365Z","comments":true,"path":"2022-02-19-how-to-be-a-vtuber/","link":"","permalink":"https://annkuoq.github.io/blog/2022-02-19-how-to-be-a-vtuber/","excerpt":"VTuber 是 Virtual YouTuber 的縮寫就是虛擬形象結合真人的 YouTuber透過捕捉真人的動作，讓虛擬人物有生動的表情與動作 其實現在的技術門檻降低很多了網路上也有很多教學","text":"VTuber 是 Virtual YouTuber 的縮寫就是虛擬形象結合真人的 YouTuber透過捕捉真人的動作，讓虛擬人物有生動的表情與動作 其實現在的技術門檻降低很多了網路上也有很多教學 本篇主要是講 3D VTuber(因為我還沒研究到 2D 啊 @@) 概述我把它拆成三塊 3D 模型 動作捕捉 直播串流 3D 模型我不會建模什麼 Unity, Blender, MMD 也沒聽過 沒關係～你可以用這個 VRoid Studio 免費輕鬆建模！直接生成一個基本人物，然後去微調它裡面的設定 五官、四肢、髮型、服裝都有很多預設可選擇也能用滑鼠直接拉數值來調整 顏色 (Texture) 可以在裡面直接畫或是在 Photoshop 畫完匯進去也可以喔 骨架 (Bones) 目前只有頭髮有支援如果要更細緻就要找其他建模軟體了但學習門檻會很高 解釋一下骨架要幹麻？如果頭髮沒有骨架當你轉頭的時候，頭髮就死板板的跟著轉如果有骨架頭髮就會隨著頭動的方向而擺動，比較像現實世界 然後還有衣服除了可以使用內建的衣服，來改顏色與增減布料也可以到 BOOTH 購買人家做好的成衣 最後完成了之後，你需要存兩種檔案 .vroid (之後還能在 VRoid Studio 繼續編輯) .vrm (模型完成檔) 補充: VRoid Studio 可商用條款 動作捕捉這裡分成硬體和軟體最簡單的硬體就是 Webcam也是你在家遠距上班用的視訊鏡頭 軟體使用 VSeeFace 免費的動捕軟體首先匯入你在 VRoid Studio 完成的 .vrm 檔然後插上 Webcam 攝影機 神奇的事就發生了~你做什麼表情，模型就跟你做一樣的表情注意: 這裡僅有臉部捕捉，若要手部或身體捕捉，就要有另外的設備 VSeeFace 也是有很多可以微調的地方自動眨眼、捕捉靈敏度、熱鍵切換表情等等網路上有很多教學影片可以看若有問題也可以使用推特聯絡開發者 補充: VSeeFace 可商用條款 上面講的是臉部捕捉，那全身捕捉呢？大概分為兩種，光學式和穿戴式 光學式要有一個攝影棚，架設很多攝影機人身上穿很多點點的衣服 (電影幕後花絮常看到)攝影機去捕捉點點的軌跡來記錄動作這種一般人負擔不起的 穿戴式把好幾個感應器穿在身上各個部位類似手機陀螺儀，可以偵測到你在移動藉由無線網路回傳給接受器有名的品牌有: Xsens, Rokoko, Neuron 不過呢～如果只是一般直播，臉部捕捉就夠了除非是什麼演唱會之類的 (補充!!!)後來我發現一個超厲害的軟體可以透過 Webcam 來做到全身捕捉就是 ThreeDPoseTracker不過我電腦效能不夠，看來要升級 GPU 惹 QQ 直播串流免費直播軟體的霸主肯定是 OBS 沒錯開放原始碼，而且擁有廣大的社群有問題都可以到官方論壇搜尋看看喔也有很多外掛可以下載 你可以使用遊戲擷取 (Game Capture)來把 VSeeFace 擷取進畫面裡然後把上下左右裁剪掉，就不會露出功能介面 補充: OBS 可商用條款 其他麥克風美美的皮，配上破破的聲音肯定無法忍受啊 如果你環境很吵，又用電容式麥克風那空調聲、滑鼠聲、媽媽叫吃飯都會收進去 如果用動圈式麥克風，因為比較不敏感就不會什麼都收進去，但嘴巴要很靠近麥講話 如果你只有一個人的話，買 USB 麥克風即可不要買 XLR 搞死自己，因為它還要接錄音介面 聊天室很多 V 都會把觀眾留言放在畫面上那要怎麼用呢？首先去直播聊天室按 ... &gt; 在彈出式視窗中開啟聊天室把網址複製到 OBS 的瀏覽器來源 (Browser Source) 你會發現…背景怎麼有顏色，但別人的都是透明的啊如果你剛好懂怎麼寫網頁，那就可以自己改 CSS 如果不懂就可以去 Chat v2.0 Style Generator 網站修改自己想要的顏色與字型等最後把下面的 CSS 複製到 OBS 中 配樂一個人講話肯定很乾，這時來點配樂也是不錯的 但是要注意版權！建議使用 YouTube 的免費音樂庫可以透過篩選找出不同的情境跟氛圍每首歌有自己的授權類型，有些會需要註明出處喔 結語最後啊～雖然這些軟體都是免費的但你可能會發現自己的電腦跑不動而且如果要直播，網路也要穩定才行就要開始砸更多錢錢囉 另外有看過一個名言皮讓人停下來，魂讓人留下來如果皮很美，但講話/企劃內容很無聊那也是無法留住人的 哎呀離題啦總之經營 VTuber 是有很多眉角的可不是只有技術方面要處理喔 參考資料 VRoid Studio VSeeFace Open Broadcaster Software | OBS","categories":[{"name":"直播 / 串流","slug":"直播-串流","permalink":"https://annkuoq.github.io/blog/categories/%E7%9B%B4%E6%92%AD-%E4%B8%B2%E6%B5%81/"}],"tags":[{"name":"obs","slug":"obs","permalink":"https://annkuoq.github.io/blog/tags/obs/"},{"name":"vtuber","slug":"vtuber","permalink":"https://annkuoq.github.io/blog/tags/vtuber/"},{"name":"motion capture","slug":"motion-capture","permalink":"https://annkuoq.github.io/blog/tags/motion-capture/"},{"name":"vroid studio","slug":"vroid-studio","permalink":"https://annkuoq.github.io/blog/tags/vroid-studio/"},{"name":"vseeface","slug":"vseeface","permalink":"https://annkuoq.github.io/blog/tags/vseeface/"}]},{"title":"如何使用 ffmpeg 串接多個影片","slug":"how-to-combine-videos-using-ffmpeg","date":"2021-05-08T06:51:15.000Z","updated":"2021-05-08T08:09:08.274Z","comments":true,"path":"2021-05-08-how-to-combine-videos-using-ffmpeg/","link":"","permalink":"https://annkuoq.github.io/blog/2021-05-08-how-to-combine-videos-using-ffmpeg/","excerpt":"最近同事在用 Premiere 串接影片時表示輸出很花時間因為 Premiere 會重新編碼","text":"最近同事在用 Premiere 串接影片時表示輸出很花時間因為 Premiere 會重新編碼 以這個案例來說其實可以使用 ffmpeg 來達成因為是相同格式的影片，不用重新編碼咻一下～就轉完了～ 下面介紹兩種串接方法一種是串接相同的編碼格式另一種是串接不同的編碼格式 相同編碼格式Concat demuxer 在你放影片的資料夾，新建一個文字檔 檔案裡寫上要串接的檔名，開頭加上 file1234file &quot;file1.mp4&quot;file &quot;file2.mp4&quot;file &quot;file3.mp4&quot;...以此類推 將檔名儲存為 list.txt 在此資料夾開啟 CMD，執行以下指令1ffmpeg -f concat -i list.txt -y -c copy output.mp4 Non-monotonous DTS如果在轉檔的過程中，出現以下 log那影片就可能會出現影音不同步的情況需要改用 重新編碼 的方式串接 1Non-monotonous DTS in output stream 0:1; previous: XXXX, current: XXXX; changing to XXXX. This may result in incorrect timestamps in the output file. 不同編碼格式Concat filter假設要串接三個檔案的指令如下: 123ffmpeg -i file.mp4 -i file2.webm -i file3.mov^-filter_complex &quot;[0:0][0:1][1:0][1:1][2:0][2:1]concat&#x3D;n&#x3D;3:v&#x3D;1:a&#x3D;1[outv][outa]&quot;^-map &quot;[outv]&quot; -map &quot;[outa]&quot; output.mkv 解釋一下指令意思 第一行: 三個來源檔的檔名 第二行: 把 [0:0][0:1][1:0][1:1][2:0][2:1] 映射到 [outv] [outa] concat=n=3: 串接 3 個檔案 v=1: 輸出 1 個 video stream a=1: 輸出 1 個 audio stream 第三行: 把 [outv] 和 [outa] 映射到 output.mkv 這些 [0:0] 或 [1:1] 都是 stream 的索引值 (index)也就是 stream 的編號 何為索引值 (index)一個影片會包含很多個 stream例如視訊、音訊、字幕等 你在轉檔的時候必須指定要使用哪一個 stream 當作來源而 index 就像這些 stream 的編號 我們試著執行以下指令 ffmpeg -i file1.mp4 -i file2.mp4 -i file3.mp4 第 3 ~ 15 行是 Input #0 的資訊 -&gt;file1.mp4 第 16 ~ 28 行是 Input #1 的資訊 -&gt;file2.mp4 第 29 ~ 41 行是 Input #2 的資訊 -&gt;file3.mp41234567891011121314151617181920212223242526272829303132333435363738394041$ ffmpeg -i file1.mp4 -i file2.mp4 -i file3.mp4Input #0, mov,mp4,m4a,3gp,3g2,mj2, from &#39;file1.mp4&#39;: Metadata: major_brand : isom minor_version : 512 compatible_brands: isomiso2avc1mp41 encoder : Lavf58.29.100 Duration: 00:05:00.40, start: 0.000000, bitrate: 6130 kb&#x2F;s Stream #0:0(eng): Video: h264 (High) (avc1 &#x2F; 0x31637661), yuv420p(tv, bt709), 1920x1080 [SAR 1:1 DAR 16:9], 5997 kb&#x2F;s, 29.97 fps, 29.97 tbr, 30k tbn, 59.94 tbc (default) Metadata: handler_name : MP4 Video Media Handler Stream #0:1(eng): Audio: aac (LC) (mp4a &#x2F; 0x6134706D), 48000 Hz, stereo, fltp, 125 kb&#x2F;s (default) Metadata: handler_name : MP4 Sound Media HandlerInput #1, mov,mp4,m4a,3gp,3g2,mj2, from &#39;file2.mp4&#39;: Metadata: major_brand : isom minor_version : 512 compatible_brands: isomiso2avc1mp41 encoder : Lavf58.29.100 Duration: 00:05:00.50, start: 0.000000, bitrate: 6346 kb&#x2F;s Stream #1:0(eng): Video: h264 (High) (avc1 &#x2F; 0x31637661), yuv420p(tv, bt709), 1920x1080 [SAR 1:1 DAR 16:9], 6212 kb&#x2F;s, 29.97 fps, 29.97 tbr, 30k tbn, 59.94 tbc (default) Metadata: handler_name : MP4 Video Media Handler Stream #1:1(eng): Audio: aac (LC) (mp4a &#x2F; 0x6134706D), 44100 Hz, stereo, fltp, 125 kb&#x2F;s (default) Metadata: handler_name : MP4 Sound Media HandlerInput #2, mov,mp4,m4a,3gp,3g2,mj2, from &#39;file3.mp4&#39;: Metadata: major_brand : isom minor_version : 512 compatible_brands: isomiso2avc1mp41 encoder : Lavf58.29.100 Duration: 00:05:00.60, start: 0.000000, bitrate: 6086 kb&#x2F;s Stream #2:0(eng): Video: h264 (High) (avc1 &#x2F; 0x31637661), yuv420p(tv, bt709), 1920x1080 [SAR 1:1 DAR 16:9], 5952 kb&#x2F;s, 29.97 fps, 29.97 tbr, 30k tbn, 59.94 tbc (default) Metadata: handler_name : MP4 Video Media Handler Stream #2:1(eng): Audio: aac (LC) (mp4a &#x2F; 0x6134706D), 44100 Hz, stereo, fltp, 125 kb&#x2F;s (default) Metadata: handler_name : MP4 Sound Media Handler 三個 input 第 3 行 Input #0 代表第 1 個 input (file1.mp4) 第 16 行 Input #1 代表第 2 個 input (file2.mp4) 第 29 行 Input #2 代表第 3 個 input (file3.mp4) 六個 index 第 10 行 Stream #0:0 代表第 1 個 input 的第 1 個 stream (file1 的 video) 第 13 行 Stream #0:1 代表第 1 個 input 的第 2 個 stream (file1 的 audio) 第 23 行 Stream #1:0 代表第 2 個 input 的第 1 個 stream (file2 的 video) 第 26 行 Stream #1:1 代表第 2 個 input 的第 2 個 stream (file2 的 audio) 第 36 行 Stream #2:0 代表第 3 個 input 的第 1 個 stream (file3 的 video) 第 39 行 Stream #2:1 代表第 3 個 input 的第 2 個 stream (file3 的 audio) 聰明的你有沒有發現～index 是從 0 而不是 1 開始編號呢？ 0 代表第一個 1 代表第二個 2 代表第三個 …以此類推 所以 0:5 就是我要取第 1 個 input 的第 6 個 stream 的意思3:1 就是我要取第 4 個 input 的第 2 個 stream 囉 關於 index 還有另一種寫法～就是加上 stream 的種類: v 代表 video a 代表 audio s 代表 subtitle 範例 1:a: 第 2 個 input 的所有 audio stream 3:s:4: 第 4 個 input 的第 5 個 subtitle stream 所以在我們上面的案例中:你可以把 [0:0][0:1][1:0][1:1][2:0][2:1]改成 [0:v][0:a][1:v][1:a][2:v][2:a]或是 [0:v:0][0:a:0][1:v:0][1:a:0][2:v:0][2:a:0] 雖然它們三者結果相同，但意義不同!!!舉個例子來說: 2:1 是第 3 個 input 的第 2 個 stream 2:a 是第 3 個 input 的所有 audio stream (此案例剛好也只有一個 audio stream) 2:a:0 是第 3 個 input 的第 1 個 audio stream 加 LOGO同事除了串接的需求影片全程也要加上 Logo 因為我沒有美感，不清楚 Logo 要怎麼擺所以請同事做一張 1920x1080 (與影片尺寸相符) 且帶透明的 .png直接先把 Logo 的位置和大小給定住我轉檔的時候就直接蓋上去 指令如下 1234ffmpeg -i file1.mp4 -i file2.mp4 -i file3.mp4 -i logo.png^-filter_complex &quot;[0:v][0:a][1:v][1:a][2:v][2:a]concat&#x3D;n&#x3D;3:v&#x3D;1:a&#x3D;1[v][a];^[v][3:v]overlay&#x3D;x&#x3D;0:y&#x3D;0[vlogo]&quot;^-map &quot;[vlogo]&quot; -map &quot;[a]&quot; output_logo.mp4 解釋一下指令意思 第一行: 三個影片和一個 logo 的檔名 第二行: 把 [0:v][0:a][1:v][1:a][2:v][2:a] 映射到 [v] 和 [a] 第三行: 把 [v][3:v] 映射到 [vlogo] overlay=x=0:y=0: logo 的 x 和 y 位置都是 0 第四行: 把 [vlogo] 和 [a] 映射到 output_logo.mp4 參考資料 Concat - FFmpeg Filters Documentation Concatenate – FFmpeg wiki Map – FFmpeg wiki h.264 - How to concatenate two MP4 files using FFmpeg? - Stack Overflow FFMPEG Video Concat and Overlay - Super User","categories":[{"name":"轉檔 / 編碼","slug":"轉檔-編碼","permalink":"https://annkuoq.github.io/blog/categories/%E8%BD%89%E6%AA%94-%E7%B7%A8%E7%A2%BC/"}],"tags":[{"name":"ffmpeg","slug":"ffmpeg","permalink":"https://annkuoq.github.io/blog/tags/ffmpeg/"}]},{"title":"網路卡卡？快用 tracert 找出問題點！","slug":"use-tracert-to-troubleshoot-network","date":"2021-05-02T02:28:20.000Z","updated":"2021-05-02T06:21:13.484Z","comments":true,"path":"2021-05-02-use-tracert-to-troubleshoot-network/","link":"","permalink":"https://annkuoq.github.io/blog/2021-05-02-use-tracert-to-troubleshoot-network/","excerpt":"最近直播有遇到網路不穩的情況但一句「網路卡卡」並不能有效的回報問題","text":"最近直播有遇到網路不穩的情況但一句「網路卡卡」並不能有效的回報問題 網路是一個很複雜的東西從你家到目的地必須經過很多個節點為了釐清封包是在哪個點卡住了我們可以使用 Windows 內建的 tracert 指令 如何使用 tracert操作步驟 鍵盤同時按著 win + R 輸入 cmd，並點擊 確定 輸入 tracert -? 查看使用方法 1234567891011121314$ tracert -?使用方式: tracert [-d] [-h maximum_hops] [-j host-list] [-w timeout] [-R] [-S srcaddr] [-4] [-6] target_name選項: -d 不要將位址解析為主機名稱。 -h maximum_hops 搜尋目標所用的最大躍點數目。 -j host-list 鬆散的主機清單來源路由 (僅 IPv4)。 -w timeout 每個回覆的等候逾時 (毫秒)。 -R 追蹤來回路徑 (僅 IPv6)。 -S srcaddr 要使用的來源位址 (僅 IPv6)。 -4 強制使用 IPv4。 -6 強制使用 IPv6。 中括號表示非必填的參數，如 [-d]而 tracert 和 target_name 為必填參數 target_name 是你要連接的目的地可以打 IP 或 Host NameIP 長得像 172.217.160.110Host Name 就是你熟悉的 www.google.com 測試公司電腦到 YouTube 伺服器輸入 tracert a.rtmp.youtube.com 瞭解測試結果最左邊是經過的網路節點，共有 11 個中間 3 個時間，表示測試 3 次最右邊是該節點的 IP 和 Host Name 1 和 6 顯示 * 並不是封包沒傳到而是某些設備可能有防火牆，所以不會回覆我們 根據 IP 與 Host Name 可以判斷 1 ~ 3 在公司內部 4 ~ 7 在中華電信 8 ~ 11 在 Google 內部 所以如果 在公司內部很慢，就要找網管人員 在中華很慢，就打中華客服 在 Google 很慢，就找 Google，但他可能不會理你 總之你在你家暢通不代表外面的路也暢通 另外直播跟一般使用並不同更看中的是 穩定度 (不掉封包)而不是 延遲 (秒數) 要很小很小當然你要 “即時互動” 就另當別論 如果只是看看網頁，瞬斷也不會有影響但直播斷個五秒就沒畫面了 QQ 結合 ping 與 tracert 的 mtr ping 只能測兩點之間 tracert 可以測中間經過的點 但 tracert 只會做一次，不能持續監測而 mtr 則是可以結合以上兩種的指令 mtr 是在 Linux 內建的指令在 Windows 則是有好心人寫的 WinMTR 小軟體 操作步驟 到該 網址，點擊 Download 解壓縮後，點擊 WinMTR.exe 開啟軟體 輸入 IP 或 Host Name 後，點擊 Start 開始測試 等待一段時間… 點擊 Stop 結束測試 匯出測試結果 點擊 Copy 可以複製測試結果到剪貼簿 點擊 Export 可以將結果匯出成檔案 它支援了 純文字 和 HTML 格式 瞭解測試結果 Nr: 經過節點的數目 Loss%: 丟包率 Sent: 已傳送封包數量 Recv: 成功接收封包數量 Best: 最小回應時間 (ms) Aveg: 平均回應時間 (ms) Worst: 最大回應時間 (ms) Last: 最後一次的回應時間 (ms) 由 mtr 可以知道 延遲 與 丟包 兩者情況 下次如果遇到網路問題~可以使用以上工具來釐清是 內部 還是 外部 問題並且有耐心的長時間觀察才能找出問題點喔！ 參考資料 tracert | Microsoft Docs MTR工具使用说明与结果分析 - 阿里云","categories":[{"name":"電腦 / 硬體","slug":"電腦-硬體","permalink":"https://annkuoq.github.io/blog/categories/%E9%9B%BB%E8%85%A6-%E7%A1%AC%E9%AB%94/"}],"tags":[{"name":"network","slug":"network","permalink":"https://annkuoq.github.io/blog/tags/network/"},{"name":"tracert","slug":"tracert","permalink":"https://annkuoq.github.io/blog/tags/tracert/"},{"name":"ping","slug":"ping","permalink":"https://annkuoq.github.io/blog/tags/ping/"},{"name":"mtr","slug":"mtr","permalink":"https://annkuoq.github.io/blog/tags/mtr/"}]},{"title":"如何把手機變 Webcam (免安裝軟體、免插線、免費)","slug":"how-to-use-mobile-as-webcam","date":"2021-04-13T12:36:32.000Z","updated":"2021-04-13T13:06:26.308Z","comments":true,"path":"2021-04-13-how-to-use-mobile-as-webcam/","link":"","permalink":"https://annkuoq.github.io/blog/2021-04-13-how-to-use-mobile-as-webcam/","excerpt":"最近找到了一個開源的酷東西不用安裝任何軟體、不用插任何線只要有網路！就可以把手機拍到的畫面投到電腦上","text":"最近找到了一個開源的酷東西不用安裝任何軟體、不用插任何線只要有網路！就可以把手機拍到的畫面投到電腦上 OBS.Ninja 如何運作它使用瀏覽器內建的 WebRTC API 功能透過點對點 (P2P) 的方式進行傳輸(所以不適合多人使用) 雖然它的名字有 OBS但其實跟 OBS 沒有關係不過作者有開發一些與 OBS 相容的功能 操作步驟 手機瀏覽器開啟 https://obs.ninja/ 點擊 Add your Camera to OBS 允許使用麥克風與相機 選擇 Video Sourse 要使用前置還是後置相機 點擊旁邊的齒輪，選擇解析度 選擇 Audio Sourse 要用什麼收音 點擊 START 複製上方的 URL 到電腦的瀏覽器上，並點擊播放 進階參數URL 網址 發送端網址: https://obs.ninja/?push=XXXXXXX 觀看端網址: https://obs.ninja/?view=XXXXXXX 其中 XXXXXXX 可以自己手動設定但如果已經有人使用了，就會顯示錯誤 設定觀看端 bitrate使用 5000 kbps 來觀看 (預設 2500 kbps)e.g. https://obs.ninja/?view=xxxxxxx&amp;bitrate=5000 設定發送端的解析度發送 1080p60 (需視硬體支援度)e.g. https://obs.ninja/?push=xxxxxxx&amp;quality=0或是e.g. https://obs.ninja/?push=xxxxxX&amp;width=1920&amp;height=1080&amp;framerate=60 設定 codec使用 vp8 來編解碼e.g. https://obs.ninja/?view=xxxxxxx&amp;codec=vp8 不同的 codec 對畫面有不同影響需要的 CPU 效能也不同 👉 其他更多詳細的參數可參考 這裡 疑難排解顯示串流狀態資訊 桌機: 按著 Ctrl 並同時點擊滑鼠左鍵 手機: 兩指一起點擊螢幕 可以看到作業系統、連接方式、編碼器Bitrate、丟包率、延遲時間等資訊 檢查網速前往 https://obs.ninja/speedtest選擇鏡頭來源後，點擊 START下方有三個圖表: Bitrate (kbps): 網速 Buffer delay (ms): 延遲時間 Packet Loss (%): 丟包率 網速建議至少 2000 kbps丟包率低於 1% 以下 減少卡頓 避免使用 Wi-Fi，因為它很受環境影響 避免在網路塞車時間使用，除非你有網路專線保證頻寬 如果沒有有線網路，可以用手機吃到飽，透過 USB 來分享網路給電腦 減少延遲發送端和接收端可以在同個 LAN 上這樣就不會經過 WAN只需把手機和電腦都連到同一台無線 AP 上即可 用 OBS 直播如果你想要直播你手機拍的到畫面可以使用 OBS 的 Browser Source 功能 增加瀏覽器來源 輸入網址: https://obs.ninja/?view=XXXXXXX 設定寬度與高度 勾選 使用 OBS 控制音訊 勾選 取得焦點時更新瀏覽器 點擊 確定 如果手機旋轉變橫的OBS 的畫面也會變橫的喔 如果你還有其他的問題可以到 reddit 上詢問作者都會詳細的回答喔 參考資料 OBS.Ninja obsninja | GitHub WebRTC","categories":[{"name":"直播 / 串流","slug":"直播-串流","permalink":"https://annkuoq.github.io/blog/categories/%E7%9B%B4%E6%92%AD-%E4%B8%B2%E6%B5%81/"}],"tags":[{"name":"obs.ninja","slug":"obs-ninja","permalink":"https://annkuoq.github.io/blog/tags/obs-ninja/"},{"name":"webrtc","slug":"webrtc","permalink":"https://annkuoq.github.io/blog/tags/webrtc/"}]},{"title":"淺談 AES 與 DRM","slug":"aes-or-drm","date":"2021-03-02T13:03:21.000Z","updated":"2021-03-02T13:20:26.509Z","comments":true,"path":"2021-03-02-aes-or-drm/","link":"","permalink":"https://annkuoq.github.io/blog/2021-03-02-aes-or-drm/","excerpt":"最近工作上有碰到 AES 和 DRM雖然是使用別人的服務但還是想稍微了解一下運作的方式","text":"最近工作上有碰到 AES 和 DRM雖然是使用別人的服務但還是想稍微了解一下運作的方式 AES 與 DRM 的差別AES 是一種加密的方法，它可以算是廣義的 DRM缺點是不能驗證播放端是誰，只要有 key 就可以解鎖就像有些會員卡認卡不認人，大家可以都拿同一張卡取得優惠 但 DRM 不一樣除了 key 還會檢查你發出的 request就像你打電話給信用卡客服客服會問你身分證和畢業於哪個國小一樣 DRM 如何運作這張 流程圖 大概說明了 DRM 如何運作 將原始檔上傳到雲端 轉檔 (DASH, HLS) 加密 (Widevine, Fairplay, PlayReady) 儲存 客戶端點擊播放，DRM Server 驗證你的身分 DRM Server 給客戶端解密鑰匙並順利播放影片 如果把 3~6 步驟講更詳細一點: OTT 跟 DRM 供應商申請 License 後，拿到鑰匙來加密檔案 客戶端點擊播放鈕 OTT Server 驗證此客戶有沒有權利看 (有沒有登入會員或付費等) 驗證通過就給 token，接著去 CDN 拿檔案回來 DRM Server 檢查客戶端發出的 DRM License Request 驗證通過就給客戶解密鑰匙，讓影片順利播放 瀏覽器的 DRM若要瀏覽器能夠支援 DRM，就要支援 EME透過 EME 觸發 CDM就能把 Lincese Requst 送去 DRM Server 做驗證 因為不同瀏覽器支援不同的 DRM所以為了確保任何一個平台都能觀看影片需要使用多種的 DRM (Multi-DRM) 目前主流的 DRM 系統如下 Widevine (Google) Fairplay (Apple) PlayReady (Microsoft) 通常 macOS, iOS 和 Safari 使用 HLS 和 FairPlay Firefox, Chrome 使用 DASH 和 Widevine Windows, Edge 使用 DASH 和 PlayReady 所以先決定服務要支援什麼平台再根據平台支援的 DRM 去決定影片格式 更詳細的支援列表可 看這裡 DRM 的費用MAL (Monthly Active Licenses) 是 DRM 計費的方法之一也就是一個月裡發的 linceses 數量 這篇 文章 介紹了 DRM 的計算方式 通常 MAL 是根據用戶數量和播放次數來計算但有時候會有例外: A 用戶在兩個設備上看同一支影片，要兩個 license A 用戶在同個設備播放同支影片，但在不同時間播放，也要兩個 license (每個 license 僅有一段許可時間) 影片的視訊和音訊檔案是分開的，也要兩個 license MAL = 月活耀用戶 x (播放數量 + 下載數量) 假設我們有 一萬個月活耀用戶 一個用戶一個月看八個影片 一個用戶一個月下載兩個影片 110,000 x (8 + 2) &#x3D; 100,000 MALs 每個 license 的費用乘以 MAL 數量就可以算出月費每一家的 license 費用可能不同如果以 PallyCon Multi DRM Cloud 的定價來計算它有個基本 20,000 MAL 的量是 $500我們的 10,000 MAL 剛好沒有超過基本量所以月費就是 $500 那如果是 100,000 MAL扣除 20,000 MAL 基本費，還有 80,000 MAL 的量定價表有個 80,000 MAL 的級距每 100 個 licenses 要 $0.5所以月費是 120,000 MAL 基本費 + (額外 80,000 MAL &#x2F; 100 X $0.5) &#x3D; $900 那如果是 1,000,000 MAL扣除 20,000 MAL 基本費，還有 980,000 MAL980,000 扣除 80,000 級距的量還有 900,000 MAL900,000 扣除 400,000 級距的量還有 500,000 MAL500,000 扣除 500,000 級距的量等於 0所以根據每個級距的費用，月費是 120,000 MAL 基本費 + (80,000 MAL &#x2F; 100 x $0.5) + (400,000 MAL &#x2F; 100 x $0.35) + (500,000 MAL &#x2F; 100 x $0.3) &#x3D; 500 + 400 + 1,400 + 1,500 &#x3D; $3800 如何驗證 DRMDRM 沒有測試環境且瀏覽器的網址必須是 https://，不能用 localhost這是因為驗證時，瀏覽器需要跟 DRM Server 連線所以我們測試跟觀眾使用服務一樣，都是要算錢的！ 不過～網路上有一個免費的 DRM Demo就是 Shaka Player 沒加密 Demo請點擊這個 影片先打開 DevTools &gt; Network接著按播放 可以看到載入很多 video 和 audio 的檔案任選一個 video 點右鍵 &gt; Open in new tab直接可以播，所以代表沒加密 有加密 Demo請點擊這個 影片一樣任選一個 video 點右鍵 &gt; Open in new tab雖然有時間軸，但畫面一片黑 因為這個新分頁沒有給 lincese request所以檔案有下載下來，但內容無法播放就像你拿到一個裝滿錢的保險箱卻打不開它 回來 Shaka Player 的 Network Console有一個 no_auth 的 requestHeaders 裡的 Request Payload 有一堆亂碼這些會送去給 DRM Server 看 然後 DRM Server 的 Response 也回傳了一堆亂碼給瀏覽器 總結 DRM 的驗證過程 瀏覽器透過 EME 驅動 CDM 送出 request 給 DRM Server DRM Server response 解密的鑰匙 CDM 解密影片 如果沒有以上這些動作就播不出影片了～ AES 實例現在很多 OTT 都有使用 AES 加密試著找一個來看看一樣先開啟 DevTools 的 Network然後播放任一影片 任選一個 .ts &gt; Open in new tab然後 .ts 就被下載下來，但是我們卻播放不了 回到 DevTools 的 Network，搜尋 m3u8有一個 chunklist_b400000.m3u8在第五行顯示 #EXT-X-KEY:METHOD=AES-128這個就代表它使用了 AES-128 加密～ 如果想要自己製作 AES 加密可以使用 openssl 和 ffmpeg 來完成詳細內容請參考 這篇文章 要用 AES 還是 DRM有錢用 DRM，沒錢用 AES 如果片商要求要有 DRM那就一定要花錢了 至於其他的就使用 AES 吧~ 不過 AES 也沒很安全因為在下載檔案時，同時能取得 key只要在本地端解密就能播放了所以就算 AES 會固定時間換 key但他早就用舊的 key 解完了 不像 DRM 要透過瀏覽器的行為與第三方伺服器連線來驗證 參考文件 DRM Overview - Bitmovin Docs DRM and authentication - Plugins | MDN How to Protect Your Content With DRM - Streaming Media How to Estimate SaaS DRM License Cost | PallyCon Shaka Player Demo Bitmovin Docs - Player FAQ - Why can’t I play DRM protected streams in Chrome?","categories":[{"name":"直播 / 串流","slug":"直播-串流","permalink":"https://annkuoq.github.io/blog/categories/%E7%9B%B4%E6%92%AD-%E4%B8%B2%E6%B5%81/"}],"tags":[{"name":"aes","slug":"aes","permalink":"https://annkuoq.github.io/blog/tags/aes/"},{"name":"drm","slug":"drm","permalink":"https://annkuoq.github.io/blog/tags/drm/"}]},{"title":"如何使用 LINE Notify 發通知","slug":"how-to-use-line-notify-to-send-messages","date":"2021-02-03T14:11:31.000Z","updated":"2021-02-03T16:48:24.699Z","comments":true,"path":"2021-02-03-how-to-use-line-notify-to-send-messages/","link":"","permalink":"https://annkuoq.github.io/blog/2021-02-03-how-to-use-line-notify-to-send-messages/","excerpt":"最近做了一個監控的 bat如果服務有發生問題就發通知提醒而 LINE 是很多人都在用的通訊軟體於是就把腦筋動到 LINE 上","text":"最近做了一個監控的 bat如果服務有發生問題就發通知提醒而 LINE 是很多人都在用的通訊軟體於是就把腦筋動到 LINE 上 LINE Notify 跟 LINE Bot 不同Bot 超過額度需要收費，Notify 則是免費但 Bot 有一些更進階的功能像是可以利用官方帳號來推播訊息不過我只是工作上使用，所以不需要用到 設定步驟 到 https://notify-bot.line.me/zh_TW/ 登入帳號 點擊右上角自己的名稱 &gt; 個人頁面 點擊 發行權杖 權杖名稱: 未來通知內容的 “開頭” 會出現這個名稱 選擇要接收通知的聊天室: 有兩種，只有自己、群組聊天室 點擊 發行 之後，會顯示一串亂碼先把它複製到別的地方保存 已連動的服務 出現我們剛剛設定的東西 LINE 出現 Notify 的訊息 1已發行個人存取權杖。連動設定完成後，請將此帳號邀請至「XX」群組中 到要收通知的群組邀請 LINE Notify 進來 打開命令提示字元，使用以下指令 1$ curl -X POST -H &quot;Authorization: Bearer XXXXXXXXXXXX&quot; -F &quot;message&#x3D;Hello World&quot; https:&#x2F;&#x2F;notify-api.line.me&#x2F;api&#x2F;notify XXXXXXXXXXXX 要改成 “步驟 4” 的一串亂碼 message= 之後要接通知內文 收到通知啦~ 後記原本 curl 用單引號結果一直報錯 12345$ curl -X POST -H &#39;Authorization: Bearer XXXXXXXXXXXX&#39; -F &#39;message&#x3D;Hello World&#39; https:&#x2F;&#x2F;notify-api.line.me&#x2F;api&#x2F;notifycurl: (6) Could not resolve host: Bearercurl: (6) Could not resolve host: XXXXXXXXXXXX&#39;&#123;&quot;status&quot;:401,&quot;message&quot;:&quot;Missing authorization header&quot;&#125; 後來改成雙引號就 OK 了 12$ curl -X POST -H &quot;Authorization: Bearer XXXXXXXXXXXX&quot; -F &quot;message&#x3D;Hello World&quot; https:&#x2F;&#x2F;notify-api.line.me&#x2F;api&#x2F;notify&#123;&quot;status&quot;:200,&quot;message&quot;:&quot;ok&quot;&#125; 參考資料 LINE Notify API Document LINE Notify Tag Archives - LINE ENGINEERING","categories":[{"name":"資工 / 程設","slug":"資工-程設","permalink":"https://annkuoq.github.io/blog/categories/%E8%B3%87%E5%B7%A5-%E7%A8%8B%E8%A8%AD/"}],"tags":[{"name":"windows","slug":"windows","permalink":"https://annkuoq.github.io/blog/tags/windows/"},{"name":"CMD","slug":"CMD","permalink":"https://annkuoq.github.io/blog/tags/CMD/"},{"name":"LINE","slug":"LINE","permalink":"https://annkuoq.github.io/blog/tags/LINE/"}]},{"title":"利用 GitHub Actions 監控網站服務 - Upptime","slug":"uptime-monitor-and-status-website-service-with-upptime","date":"2021-01-09T13:02:33.000Z","updated":"2021-02-03T16:49:27.938Z","comments":true,"path":"2021-01-09-uptime-monitor-and-status-website-service-with-upptime/","link":"","permalink":"https://annkuoq.github.io/blog/2021-01-09-uptime-monitor-and-status-website-service-with-upptime/","excerpt":"前陣子在網路上看到一個很酷的開源專案充分的使用榨乾 GitHub 每隔一段時間用 GitHub Actions 看網站有沒有掛掉 若掛掉就用 GitHub Issues 回報異常事件 使用 GitHub Pages 產生服務狀態的頁面","text":"前陣子在網路上看到一個很酷的開源專案充分的使用榨乾 GitHub 每隔一段時間用 GitHub Actions 看網站有沒有掛掉 若掛掉就用 GitHub Issues 回報異常事件 使用 GitHub Pages 產生服務狀態的頁面 Actions 簡介Actions 是 GitHub 上的一個自動化服務你可以把腳本放到上面當特定事件發生時，自動執行你的腳本 以 Upptime 來說預設是每隔五分鐘來你的網站一次同時也會記錄每次的 response time讓你在頁面上看歷史紀錄等等 這些動作都寫在 Actions 的腳本中機器都會自己執行完全不用動到一根指頭 目前 Actions 支援 Windows, macOS, Linux 三種環境然後 額度 的話，如果是免費個人帳戶 在 Linux 上，一個月有 2000 分鐘的執行時間 在 Windows 上，用 1 分鐘會消耗 2 分鐘的額度 (Linux 的兩倍) 在 macOS 上，用 1 分鐘會消耗 10 分鐘的額度 (Linux 的十倍) 當然你也可以用 自己的機器 跑 不過！如果你的 Repo 設為公開的話就可以免費使用 Actions既然用免費的，就要有某天要付錢的覺悟 大概介紹完之後就來開始裝 Upptime 吧 創建 GitHub Repo 進入 Upptime 的 repo 點擊 Use this template 創建 repo 輸入 repo name 選擇要不要公開 repo 勾選 Include all branches 點擊 Create repository from temple 等一陣子後就會複製一樣的 repo 到你的帳號下 設定 GitHub Pages 到你的 repo，點擊 Settings 往下捲到 GitHub Pages 的 Source Branch 設為 gh-pages 點擊 Save 設定 Repository Secret為了讓 Upptime 有 commit 和 publish 網頁的權限需要設定 Personal Access Token 點擊自己的 Profile picture &gt; Settings 點擊左側的 Developer settings &gt; Personal access tokens &gt; Generate new token 新增 token Note: upptime Select scopes: 勾選 repo 和 workflow 點擊 Generate token","categories":[{"name":"資工 / 程設","slug":"資工-程設","permalink":"https://annkuoq.github.io/blog/categories/%E8%B3%87%E5%B7%A5-%E7%A8%8B%E8%A8%AD/"}],"tags":[{"name":"upptime","slug":"upptime","permalink":"https://annkuoq.github.io/blog/tags/upptime/"},{"name":"github","slug":"github","permalink":"https://annkuoq.github.io/blog/tags/github/"}]},{"title":"如何在 CMD 輸出 log 檔","slug":"how-to-save-windows-cmd-logfile","date":"2020-12-25T14:57:47.000Z","updated":"2021-02-03T16:48:37.089Z","comments":true,"path":"2020-12-25-how-to-save-windows-cmd-logfile/","link":"","permalink":"https://annkuoq.github.io/blog/2020-12-25-how-to-save-windows-cmd-logfile/","excerpt":"最近在學寫批次檔需要輸出 log 檔作為紀錄去網路搜尋之後看到了有好幾種的指令","text":"最近在學寫批次檔需要輸出 log 檔作為紀錄去網路搜尋之後看到了有好幾種的指令 &gt; output.log 2&gt; output.log 2&gt;&gt; output.log 1&gt;&amp;2 2&gt;&amp;1 對於一個門外漢來說不如就直接 Trial and error 吧(想直接看結論 點此) 前置作業 開啟檔案總管 在 D 槽下新增一個 test 資料夾，並放入幾個檔案 滑鼠點擊網址列 輸入 cmd 並按下 Enter 成功開啟 CMD (命令提示字元)，並且路徑是 D:\\test","categories":[{"name":"資工 / 程設","slug":"資工-程設","permalink":"https://annkuoq.github.io/blog/categories/%E8%B3%87%E5%B7%A5-%E7%A8%8B%E8%A8%AD/"}],"tags":[{"name":"windows","slug":"windows","permalink":"https://annkuoq.github.io/blog/tags/windows/"},{"name":"CMD","slug":"CMD","permalink":"https://annkuoq.github.io/blog/tags/CMD/"}]},{"title":"一樣的 Bitrate，解析度高的畫質會比較好嗎？","slug":"bitrate-vs-resolution","date":"2020-10-25T08:46:42.000Z","updated":"2021-05-02T04:20:07.198Z","comments":true,"path":"2020-10-25-bitrate-vs-resolution/","link":"","permalink":"https://annkuoq.github.io/blog/2020-10-25-bitrate-vs-resolution/","excerpt":"某天同事問說 iMovie 怎麼輸出我說: 除了設解析度，還有 Bitrate同事問 Bitrate 是什麼？我說: 就是資料流，每秒的資料量通常越大，畫質越好，但檔案越大","text":"某天同事問說 iMovie 怎麼輸出我說: 除了設解析度，還有 Bitrate同事問 Bitrate 是什麼？我說: 就是資料流，每秒的資料量通常越大，畫質越好，但檔案越大 後來回到自己的位置上突然覺得很好奇我知道 Bitrate 越大，畫質越好但是解析度越大，就代表畫質越好嗎？ 解析度、Bitrate、畫質它們三者的關係是什麼呢？誰是影響畫質的最大因素呢？ 於是決定做個實驗看看同樣 Bitrate，不同解析度的畫質誰比較好 測試方法 使用 Mixkit 的影片素材 使用 FFmpeg 轉出四個檔案 1080p 4 Mbps1ffmpeg -i input.mp4 -s 1920x1080 -c:v libx264 -x264-params &quot;nal-hrd&#x3D;cbr:force-cfr&#x3D;1&quot; -b:v 4M -minrate 4M -maxrate 4M -bufsize 8M 1080p4M.mp4 1080p 1 Mbps1ffmpeg -i input.mp4 -s 1920x1080 -c:v libx264 -x264-params &quot;nal-hrd&#x3D;cbr:force-cfr&#x3D;1&quot; -b:v 1M -minrate 1M -maxrate 1M -bufsize 2M 1080p1M.mp4 480p 4 Mbps1ffmpeg -i input.mp4 -s 854x480 -c:v libx264 -x264-params &quot;nal-hrd&#x3D;cbr:force-cfr&#x3D;1&quot; -b:v 4M -minrate 4M -maxrate 4M -bufsize 8M 480p4M.mp4 480p 1 Mbps1ffmpeg -i input.mp4 -s 854x480 -c:v libx264 -x264-params &quot;nal-hrd&#x3D;cbr:force-cfr&#x3D;1&quot; -b:v 1M -minrate 1M -maxrate 1M -bufsize 2M 480p1M.mp4 測試結果畫質比較 1080p4M &gt; 480p4M &gt; 480p1M &gt; 1080p1M 大小比較 1080p4M = 480p4M &gt; 1080p1M = 480p1M 截圖比較 點我看大圖 👈","categories":[{"name":"轉檔 / 編碼","slug":"轉檔-編碼","permalink":"https://annkuoq.github.io/blog/categories/%E8%BD%89%E6%AA%94-%E7%B7%A8%E7%A2%BC/"}],"tags":[{"name":"ffmpeg","slug":"ffmpeg","permalink":"https://annkuoq.github.io/blog/tags/ffmpeg/"},{"name":"Mixkit","slug":"Mixkit","permalink":"https://annkuoq.github.io/blog/tags/Mixkit/"}]},{"title":"如何使用 OBS 同時直播多個平台","slug":"obs-multi-rtmp-outputs-plugin","date":"2020-09-23T01:12:05.000Z","updated":"2021-07-23T01:34:42.354Z","comments":true,"path":"2020-09-23-obs-multi-rtmp-outputs-plugin/","link":"","permalink":"https://annkuoq.github.io/blog/2020-09-23-obs-multi-rtmp-outputs-plugin/","excerpt":"OBS 預設只能直播一個平台但我需要同時直播 YouTube 和 Facebook所以這陣子都在搜尋有沒有什麼好的解決方法","text":"OBS 預設只能直播一個平台但我需要同時直播 YouTube 和 Facebook所以這陣子都在搜尋有沒有什麼好的解決方法 例如 開兩個 OBS (兩個 OBS 的設定可能會打架) 用第三方軟體: Restream, Straas (未來可能改為收費) 自架伺服器: Nginx (學習門檻較高) 在心灰意冷的時候看到 OBS Forum 上有人做了 Plug-in話不多說就趕快開始吧！ Windows 安裝 2021/7/23 更新0.2.6 版 已可自動安裝在 windows 上，不用手動複製檔案請點擊下載 obs-multi-rtmp.zip，解壓縮後執行 .exe 下載 obs-multi-rtmp_Windows_0.2.5.zip(0.2.5 是我這個時候的最新版本，你也可以下載之後更新的版本)解壓縮後有兩個資料夾: data, obs-plugins 打開 OBS，介面左上角會出現一個 多路串流 的區塊你可能需要拉寬那個視窗才看得清楚 點擊 建立新串流目標 &gt; 輸入名稱、伺服器、串流碼等設定 &gt; OK 點擊 開始 送直播訊號 補充這個套件可以單獨停止或開始某路直播也可以個別設定解析度和編碼格式不過要注意電腦效能和網速能承受的量 如果不小心關閉了套件的視窗可以從 檢視 &gt; 停駐視窗 &gt; 多路串流 (Multiple output) 再次開啟 參考資料 Multiple RTMP outputs plugin | OBS Forums sorayuki/obs-multi-rtmp | GitHub kilinbox/obs-multi-rtmp | GitHub 做了个OBS多路推流插件 - 哔哩哔哩","categories":[{"name":"直播 / 串流","slug":"直播-串流","permalink":"https://annkuoq.github.io/blog/categories/%E7%9B%B4%E6%92%AD-%E4%B8%B2%E6%B5%81/"}],"tags":[{"name":"obs","slug":"obs","permalink":"https://annkuoq.github.io/blog/tags/obs/"}]},{"title":"來去直營店換 iPhone 電池","slug":"iphone-se-battery-replacement-at-xinyi-a13","date":"2020-05-11T14:27:01.000Z","updated":"2021-02-03T16:49:48.039Z","comments":true,"path":"2020-05-11-iphone-se-battery-replacement-at-xinyi-a13/","link":"","permalink":"https://annkuoq.github.io/blog/2020-05-11-iphone-se-battery-replacement-at-xinyi-a13/","excerpt":"手上這支 iPhone SE 已經四年多電池健康度為 82%雖然它本來就只有 1624 mAh但感覺用 safari 滿容易發熱和噴電的於是就決定去原廠換電池~","text":"手上這支 iPhone SE 已經四年多電池健康度為 82%雖然它本來就只有 1624 mAh但感覺用 safari 滿容易發熱和噴電的於是就決定去原廠換電池~ 線上預約一個禮拜前先線上預約到官網 支援服務 &gt; iPhone &gt; 電池與充電 &gt; 電池更換 &gt; 親自送修登入 Apple ID &gt; 輸入產品序號 &gt; 搜尋台北市 &gt; Apple 台北信義 A13 &gt; 選時段 接著信箱就收到了預約的詳細資料 換電池的價格可以看 這裡 維修當天到了預約當天 (平日下午)進店家後，往下走到 B1隨便抓一個人問預約維修要去哪裡然後走到某個座位後換一個工作人員來檢測手機目前的情況 問我有沒有做備份 關閉尋找我的 iPhone 跑系統檢測 (約兩分鐘) 檢查硬體外觀有無受損 確認手機擁有人姓名、電話、Email 跑音訊檢測 講述維修條款並簽名 取出 SIM 卡並歸還 告知取件時間 (45 分鐘後) 取件到了指定時間後再次隨便抓一個人去哪裡取件然後有人拿著手機過來 確認姓名與證件 協助安裝 SIM 卡 講述保固條款並簽名 (保固 90 天) 結帳 (收據寄信箱) 然後工作人員說新電池不會有太多電那邊展示台的手機都可以拔起來你的插下去就可以充囉 趁著充電空檔一邊驗機原本資料都還在螢幕、相機、聽筒喇叭都正常電池最大容量也變 100%回家後上網聽半天的音樂都不會掛真是太棒了 😀","categories":[{"name":"電腦 / 硬體","slug":"電腦-硬體","permalink":"https://annkuoq.github.io/blog/categories/%E9%9B%BB%E8%85%A6-%E7%A1%AC%E9%AB%94/"}],"tags":[{"name":"iphone","slug":"iphone","permalink":"https://annkuoq.github.io/blog/tags/iphone/"}]},{"title":"如何知道影片從頭到尾 Bitrate 的變化","slug":"how-to-check-video-bitrate","date":"2020-04-26T06:29:21.000Z","updated":"2020-12-28T12:14:13.010Z","comments":true,"path":"2020-04-26-how-to-check-video-bitrate/","link":"","permalink":"https://annkuoq.github.io/blog/2020-04-26-how-to-check-video-bitrate/","excerpt":"最近在研究適合網路串流的 VBR 轉檔想知道整段影片的 Bitrate 是怎樣變化的要是 maximum bitrate (最大流量) 高過網速時可能就會出現緩衝轉圈圈的情況","text":"最近在研究適合網路串流的 VBR 轉檔想知道整段影片的 Bitrate 是怎樣變化的要是 maximum bitrate (最大流量) 高過網速時可能就會出現緩衝轉圈圈的情況 如果用 MediaInfo 看，只會有 average bitrate (平均流量)但實際上 Bitrate 是上下不停變動的 在開始之前要先安裝好 FFmpeg 和 Excel 軟體～ 列出影格大小與長度首先用 ffprobe 來找出影格資訊 1$ ffprobe -print_format csv -select_streams v:0 -show_entries frame&#x3D;pkt_size,pkt_duration_time input.mp4 &gt; output.csv 參數解釋: -print_format csv用 csv 格式列印出來 -select_streams v:0選擇 index 為 0 的視訊流 -show_entries frame=pkt_size,pkt_duration_time指定列出 frame 的 容量大小和時間長度 input.mp4要檢查的影片 &gt; output.csv將印出的資料另存成 .csv 檔案 輸出結果如下: pkt_duration_time (second) pkt_size (byte) 0.033367 140288 0.033367 1992 0.033367 19638 0.033367 4110 0.033367 8653 0.033367 4188 0.033367 36206 0.033367 4686 … … 累計秒數與大小現在只得到每一格影格的流量但不曉得每一秒的流量這部測試影片是 29.97 格先算大約 30 格所以要固定間隔 30 個 frame 來相加以下附上 excel 公式～ 每秒容量大小 第 1 格 ~ 第 30 格 size 加總 -&gt; =SUM(OFFSET($B$1,(ROW(B1)-1)*30,,30,))*8/1000 第 31 格 ~ 第 60 格 size 加總 -&gt; =SUM(OFFSET($B$1,(ROW(B2)-1)*30,,30,))*8/1000 第 61 格 ~ 第 90 格 size 加總 -&gt; =SUM(OFFSET($B$1,(ROW(B3)-1)*30,,30,))*8/1000 … 累計秒數長度 第 1 格 ~ 第 30 格 second 加總 -&gt; =SUM(OFFSET($A$1,(ROW(A1)-1)*30,,30,)) 1. + (第 31 格 ~ 第 60 格 second 加總) -&gt; =C1+SUM(OFFSET($A$1,(ROW(A1)-1)*30,,30,)) 2. + (第 61 格 ~ 第 90 格 second 加總) -&gt; =C2+SUM(OFFSET($A$1,(ROW(A2)-1)*30,,30,)) … 參數解釋 OFFSET 函數傳回指定列數及欄數之儲存格範圍參照 OFFSET(reference, rows, cols, [height], [width]) reference: 起始參照位置 rows: 往上或往下的參照列數 cols: 往左或往右的參照欄數 height: 要傳回參照的列數高度 (選填) width: 要傳回參照的欄數寬度 (選填) SUM 函數加總儲存格參照範圍的值 SUM(number1,[number2],...) number1: 可以是數字、一個儲存格參照、一個儲存格範圍 number2: 同上 (選填) 換算單位*8/1000 這是要幹嘛的呢？因為 ffprobe 列出的單位是 byte所以要換算成 Kbit 1 byte = 8 bits1 bit = 0.001 kbit 輸出結果如下: pkt_duration_time pkt_size 累計秒數 (second) 每秒大小 (kbit) 0.033367 140288 1.00101 3550.312 0.033367 1992 2.00202 2459.352 0.033367 19638 3.00303 2504.12 0.033367 4110 4.00404 3661.992 0.033367 8653 5.00505 2185.192 0.033367 4188 6.00606 3699.024 0.033367 36206 7.00707 3951.6 0.033367 4686 8.00808 4252.92 … … … … 接著就可以用圖表功能畫出 Bitrate 變化囉～ VLC media player這是一個開源的免費軟體它可以在播放影片的時候顯示目前的流量 播放影片 點擊功能表 工具 &gt; 媒體資訊 切換到 統計資訊 展開 輸入位元率 這樣就可以看到目前使用了多少 Bitrate","categories":[{"name":"轉檔 / 編碼","slug":"轉檔-編碼","permalink":"https://annkuoq.github.io/blog/categories/%E8%BD%89%E6%AA%94-%E7%B7%A8%E7%A2%BC/"}],"tags":[{"name":"ffmpeg","slug":"ffmpeg","permalink":"https://annkuoq.github.io/blog/tags/ffmpeg/"},{"name":"excel","slug":"excel","permalink":"https://annkuoq.github.io/blog/tags/excel/"},{"name":"bitrate viewer","slug":"bitrate-viewer","permalink":"https://annkuoq.github.io/blog/tags/bitrate-viewer/"},{"name":"vlc media player","slug":"vlc-media-player","permalink":"https://annkuoq.github.io/blog/tags/vlc-media-player/"}]},{"title":"免費的 AWS 轉檔基礎知識線上課程","slug":"free-aws-digital-training-for-video-compression-basics","date":"2020-04-03T14:13:37.000Z","updated":"2020-12-28T12:14:12.994Z","comments":true,"path":"2020-04-03-free-aws-digital-training-for-video-compression-basics/","link":"","permalink":"https://annkuoq.github.io/blog/2020-04-03-free-aws-digital-training-for-video-compression-basics/","excerpt":"AWS 為了讓大家能更了解他們的服務提供了許多免費的線上課程其中包括了許多基礎知識例如雲端架構、資料庫、物聯網、媒體服務等等","text":"AWS 為了讓大家能更了解他們的服務提供了許多免費的線上課程其中包括了許多基礎知識例如雲端架構、資料庫、物聯網、媒體服務等等 只要到 aws.training 註冊帳號就能上課囉～這次我上的是轉檔基礎知識 Video Compression Basics點擊 Launch 就會另開視窗開啟課程課程結束還能獲得結業證書 色彩空間 (Color Space) 用於測量成像技術的準確性例如列印、攝影、影音等 後來的 Rec. 601, Rec. 709, Rec. 2020 標準則規定了顯示器可呈現的色彩 1982 年，Rec. 601 代表 SDTV 的色彩空間 1990 年，Rec. 709 代表 HD 的色彩空間 2012 年，Rec. 2020 代表 4K UHD 的色彩空間 三角形內的區域代表可見的顏色在使用此顏色空間時，稱為色域 (gamut)意思是特定空間的完整顏色範圍 色彩通道 (Color Channel)一個像素可以儲存三種原色 (紅綠藍) 的色彩通道 (Color Channels)也就是說一個像素有三個色彩通道 如果三個顏色通道各有 8 bits紅綠藍就各有 256 種顏色一個像素就有 1600 萬種不同顏色與強度 256 x 256 x 256 = 16777216 種顏色 這稱為 24 bit color，或說這個影片的位元深度有 241600 萬種顏色已適用大部分的終端用戶需求 10 bits 可提供 10 億種顏色 (HDR) 1024 x 1024 x 1024 = 1073741824 12 bits 則可提供 680 億種顏色 4096 x 4096 x 4096 = 68719476736 編解碼器和容器壓縮 (Compression)原始檔太大導致不方便在網路上移動也不好在家用型設備上觀看所以必須要壓縮 壓縮過程中會刪除一些顏色資料但通常我們不會發覺實際上，我們對亮度還要比顏色更敏感 特別的是我們對平滑或漸層的細微變化很敏感但不會去注意複雜部分的細節差異 編解碼器 (Codec)壓縮視訊和音訊的軟體稱為編解碼器 (Codec)縮寫來自: compress / decompress 或 encode / decode 這些年來已經創建了數十種編解碼器而且還持續開發中目的是為了在減少大小的同時保持影像品質 編解碼器類型無損編解碼器 (Lossless codecs)解壓縮後可回復原始資料通常用於剪輯後製與特效製作 有損編解碼器 (Lossy codecs)減少了多餘的視覺資料同時盡可能看起來像原始影像通常用於發布 你在智慧電視和個人裝置上看的影音就是使用有損編解碼器進行壓縮 有損編解碼器有不同程度的損失 (loss)損失最少的是幀內編解碼器 (mezzanine codecs)它介於無損與高度壓縮之間 編碼標準的演變有兩個組織在研發與命名編碼標準 ITU-T Video Coding Experts Group (VCEG) ISO-IEC Moving Picture Experts Group (MPWG) H.264 (ITU 命名) 是過去十年在網路傳輸上，最受歡迎的格式之一也稱為 MPEG-4 Part 10 Advanced Video Coding (MPEG 命名) 2013 年，H.265 也稱為 HEVC (MPEG-H Pan 2 High Efficiency Video Coding)是為了提高 4K UHD 的傳遞效率而研發 從主要用於廣播電視的 MPEG-2 到 H.264 和現在的 H.265新的 codec 都比上一代舊的 codec 減少 50% 的 bandwidth並且顯著改善畫質又降低 bitrate 容器 (Container)影音壓縮之後需要放一些基本數據到容器中以便讓設備可以儲存、移動、回放 容器就像一個箱子視訊、音訊、字幕和 metadata 是箱子中的貨物 容器可以透過副檔名來識別常用的容器有: .mov, .mpg 注意: mpeg 可以是編解碼器，也是容器的名稱 每種容器的容納方式和用途不同有些只能容納一種類型的編解碼器有些可以容納多種編解碼器有些對可容納的編解碼器會有限制 MPEG Transport Stream (TS)MPEG Transport Stream (.ts) 是最古老且用途最廣泛的容器之一 .ts 容器可以容納多個視訊和音訊的編解碼器甚至可以容納多個容器，例如其他 .ts這就是單個串流傳送多個電視節目的方式 想像一下大箱子裡的小箱子顧名思義，它被設計成運輸容器 (transportation container) 圖像群組編碼器使用複雜的演算來實現不同類型的壓縮希望保持畫質且同時減少檔案大小 有一種重要的壓縮類型是 圖像群組 GOP (Group of Pictures)而單一圖像最常用的類型則是 JPEG (Joint Photographic Experts Group) JPEG 壓縮方式JPEG 丟棄人眼不會注意的顏色和複雜細節因為我們對顏色的敏感度不如亮度 JPEG 稱為幀內編碼 (intra-frame)幀內代表只參考本身的影格換句話說，解碼所需的訊息都在這個壓縮檔裡 想像一下有棵樹在畫面中，然後有個人騎車經過相機捕捉一系列的靜止圖像JPEG 壓縮法可以應用在每一個影格上這稱為 Motion JPEG它是最早使用的視訊壓縮技術之一 但它沒考慮影格之間重複的資料像是背景和樹在每個影格裡幾乎沒變這就是所謂的時間冗餘 (temporal redundancy)所以後來發明了幀間壓縮技術 (inter-frame)來跟蹤影格與影格之間的變化和不變化 GOP 壓縮方式編碼器讀取並儲存一連串的影格 (Sequence)先對第一格使用幀內編碼，並創建關鍵影格 (I-frame)再來分析此影格與下一個影格的差異這些後續影格稱為預測影格 P-frames (Predictive)不變的像素不會再次壓縮，而是從 I-frame 引用 接著，編碼器會創建另一個 P-frame在這種情況下，它可能會參考前面的 I-frame 或 P-frame然後，編碼器可以選擇介於 I 和 P 影格之間的影格以向前和向後參考影格的方式進行壓縮這稱為雙向預測影格 B-frame (Bi-directional Predictive) 通常 I-frame 使用最多容量其次是 P-frame，最後是 B-frame 這些影格需要以正確的順序播放給觀眾所以每個影格會分配時間戳記 PTS (Presentation Time Stamp) 並且需要按照編碼順序解碼影格播放順序不代表解壓縮的順序I-frame 首先被壓縮再來是 P-frame 被壓縮，最後是 B-frame為了以正確的順序解碼每個影格會分配時間戳記 DTS (Decode Time Stamp) 因此解碼器會按照解碼順序 (DTS) 解壓縮影格再按照呈現順序 (PTS) 播放給觀眾 當 GOP 結束時編碼器會再創建一個新的 I-frame並重複壓縮的過程 一個 GOP 是從 I-frame 到下一個 I-frame 的前一個影格影音串流常用的 GOP 長度可能是24, 30, 60, 90 或 25, 50, 100 格大多數編碼器都可調整 GOP 的 B-frame 數量和 GOP 長度 影格的組成結構影格 (frame) 分為多個片段 (slice)切片由大區塊 (macroblock) 組成大區塊由區塊 (block) 組成區塊由單個像素 (pixel) 組成","categories":[{"name":"轉檔 / 編碼","slug":"轉檔-編碼","permalink":"https://annkuoq.github.io/blog/categories/%E8%BD%89%E6%AA%94-%E7%B7%A8%E7%A2%BC/"}],"tags":[{"name":"aws","slug":"aws","permalink":"https://annkuoq.github.io/blog/tags/aws/"},{"name":"compression","slug":"compression","permalink":"https://annkuoq.github.io/blog/tags/compression/"}]},{"title":"如何讓 Google 搜尋到自己的部落格","slug":"how-to-find-my-blog-on-google-search","date":"2020-03-15T02:50:02.000Z","updated":"2020-12-28T12:14:12.994Z","comments":true,"path":"2020-03-15-how-to-find-my-blog-on-google-search/","link":"","permalink":"https://annkuoq.github.io/blog/2020-03-15-how-to-find-my-blog-on-google-search/","excerpt":"首先要先了解 Google 搜尋是怎麼運作的其實 Google 不是搜尋整個網路而是在搜尋 Google 的網頁索引 (index)","text":"首先要先了解 Google 搜尋是怎麼運作的其實 Google 不是搜尋整個網路而是在搜尋 Google 的網頁索引 (index) Google 搜尋的運作方式有三個步驟: Crawling 抓取 Indexing 建立索引 Serving and Ranking 傳回搜尋結果和排名 1. Crawling 抓取因為網頁沒有統一登錄的地方所以 Google 會透過稱為 Crawlers 的自動化程式來抓取網路上的內容再將這些網頁所含的資料傳回 Google 伺服器 2. Indexing 建立索引Google 的系統在分析網頁的內容後 (文字、圖片、影片等)就會將這些資料編目到 Google 索引中就像書末索引一樣Google 會為網頁中的每個字詞建立條目 3. Serving and Ranking 傳回搜尋結果和排名因為搜尋結果太多了所以 Gooogle 會用演算法排名例如關鍵字出現頻率、或使用者所在位置、以前的搜尋紀錄等等 想更了解 Google 搜尋的運作方式 可點我 現在我們知道了 Google 其實是在搜尋 index所以你有兩個選擇: 等 Google Crawlers 爬到你且建好索引的那一天 直接把網頁內容告訴 Google 看起來當然是直接告訴 Google 比較快～ 使用 Search ConsoleSearch Console 是 Google 的服務我們把網站交給它之後就可以搜尋到自己的部落格囉！ 安裝步驟 登入 Google 並前往 Search Console &gt; 立即開始 選擇要新增的網站資源 網域: 必須進行 DNS 驗證 網址前置字元: 支援多種驗證方式 因為我是用 GitHub Pages 架站，並沒有買網域，所以用 網址前置字元接著輸入包含通訊協定和子網域的完整網址: https://annkuoq.github.io/blog/ 驗證我擁有這個網站Google 提供了多種驗證方法: 上傳 HTML 檔案 HTML 標記 DNS 紀錄 Google Analytics (分析) 追蹤程式碼 Google 代碼管理工具容器片段 Google 協作平台 Blogger Google Domains 我是用 HTML 標記 的方式把 &lt;meta&gt; tag 貼到 \\themes\\你的主題名稱\\layout\\_partia\\head.ejs 測試搜尋結果過幾天後，搜尋 site:https://annkuoq.github.io/blog/看見自己的網站出現太感人了 😭 Sitemap 網站地圖除了給 Google 網址也可以提供 Sitemap (網站地圖)它會列出所有頁面 URL 和 metadata讓搜尋引擎更有效的完整抓取網站 標準的 XML Sitemap 範例: 123456789&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;UTF-8&quot;?&gt;&lt;urlset xmlns&#x3D;&quot;http:&#x2F;&#x2F;www.sitemaps.org&#x2F;schemas&#x2F;sitemap&#x2F;0.9&quot;&gt; &lt;url&gt; &lt;loc&gt;http:&#x2F;&#x2F;www.example.com&#x2F;&lt;&#x2F;loc&gt; &lt;lastmod&gt;2005-01-01&lt;&#x2F;lastmod&gt; &lt;changefreq&gt;monthly&lt;&#x2F;changefreq&gt; &lt;priority&gt;0.8&lt;&#x2F;priority&gt; &lt;&#x2F;url&gt;&lt;&#x2F;urlset&gt; 想了解上面那些 tag 的用意 可點我 如何產生 Sitemap1. 線上產生器網路上有很多免費 Sitemap 線上產生器例如 XML-Sitemaps 在根目錄的 _config.yml 加上設定12sitemap: path: sitemap.xml 清除快取和舊的靜態檔案重新產生靜態檔案與部署網站123$ hexo clean$ hexo g$ hexo d 到 XML-Sitemaps 輸入網址 &gt; START View Sitemap Details &gt; Download Your XML Sitemap File 把 sitemap.xml 上傳到根目錄 (GitHub Repo) 2. 第三方套件有一個叫 hexo-generator-sitemap 的套件能讓你的 Sitemap 和靜態檔案同時產生 安裝套件 1$ npm install hexo-generator-sitemap --save 在根目錄的 _config.yml 加上設定12sitemap: path: sitemap.xml 清除快取和舊的靜態檔案產生靜態檔案和 Sitemap重新部署網站123$ hexo clean$ hexo g$ hexo d 提交 Sitemap 前往 Search Console 主控台 點擊左側欄位中的 Sitemap 輸入 sitemap.xml 點擊 提交 新增或修改網頁內容如果之後有新增網頁或修改內容可以重新提交 Sitemap或請 Search Console 重新檢索 點擊左側的 網址審查 輸入網址 點擊 要求建立索引 參考資料 Search Console 官方文件 Google Search Console 初學者指南，如何使用及安裝 為什麼搜尋 (Google) 不到我的 Hexo 部落格？","categories":[{"name":"企劃 / 行銷","slug":"企劃-行銷","permalink":"https://annkuoq.github.io/blog/categories/%E4%BC%81%E5%8A%83-%E8%A1%8C%E9%8A%B7/"}],"tags":[{"name":"hexo","slug":"hexo","permalink":"https://annkuoq.github.io/blog/tags/hexo/"},{"name":"github pages","slug":"github-pages","permalink":"https://annkuoq.github.io/blog/tags/github-pages/"},{"name":"google search console","slug":"google-search-console","permalink":"https://annkuoq.github.io/blog/tags/google-search-console/"}]},{"title":"在 Hexo 安裝 utterances 留言版","slug":"add-utterances-comment-widget-to-hexo","date":"2020-03-09T14:14:53.000Z","updated":"2020-12-28T12:14:12.994Z","comments":true,"path":"2020-03-09-add-utterances-comment-widget-to-hexo/","link":"","permalink":"https://annkuoq.github.io/blog/2020-03-09-add-utterances-comment-widget-to-hexo/","excerpt":"為什麼要用 utterances？ 因為沒有廣告 因為不會追蹤用戶隱私 因為不用再申請一個帳號 (部落格本來就架在 GitHub 上)","text":"為什麼要用 utterances？ 因為沒有廣告 因為不會追蹤用戶隱私 因為不用再申請一個帳號 (部落格本來就架在 GitHub 上) 安裝步驟 在 GitHub 創建一個 Public Repository 安裝 utterances app &gt; Only select repositories &gt; 選剛剛創建的 repo &gt; Installutterances APP 要求存取的權限有: No access to code Read access to metadata Read and write access to issues 回到留言板留言後，repo 就會自動開好票囉","categories":[{"name":"資工 / 程設","slug":"資工-程設","permalink":"https://annkuoq.github.io/blog/categories/%E8%B3%87%E5%B7%A5-%E7%A8%8B%E8%A8%AD/"}],"tags":[{"name":"hexo","slug":"hexo","permalink":"https://annkuoq.github.io/blog/tags/hexo/"},{"name":"github pages","slug":"github-pages","permalink":"https://annkuoq.github.io/blog/tags/github-pages/"},{"name":"utterances","slug":"utterances","permalink":"https://annkuoq.github.io/blog/tags/utterances/"}]},{"title":"用 Hexo 和 GitHub Pages 架部落格","slug":"use-hexo-to-deploy-github-pages","date":"2020-01-03T15:19:47.000Z","updated":"2020-12-28T12:14:12.994Z","comments":true,"path":"2020-01-03-use-hexo-to-deploy-github-pages/","link":"","permalink":"https://annkuoq.github.io/blog/2020-01-03-use-hexo-to-deploy-github-pages/","excerpt":"為什麼要用 Hexo？ 因為中文資源比較多 因為很多別人做好的主題可以直接用 執行環境 Win 10 與 Cmder","text":"為什麼要用 Hexo？ 因為中文資源比較多 因為很多別人做好的主題可以直接用 執行環境 Win 10 與 Cmder 前置步驟 安裝 Git 安裝 Node.js 創建一個 GitHub Repository 安裝步驟 安裝 hexo1234567$ npm install -g hexo-cliC:\\Program Files\\nodejs\\node_global\\hexo -&gt; C:\\Program Files\\nodejs\\node_global\\node_modules\\hexo-cli\\bin\\hexonpm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@2.1.2 (node_modules\\hexo-cli\\node_modules\\fsevents):npm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform for fsevents@2.1.2: wanted &#123;&quot;os&quot;:&quot;darwin&quot;,&quot;arch&quot;:&quot;any&quot;&#125; (current: &#123;&quot;os&quot;:&quot;win32&quot;,&quot;arch&quot;:&quot;x64&quot;&#125;)+ hexo-cli@3.1.0added 82 packages from 356 contributors in 5.298s cd 到桌面1cd C:\\Users\\user\\Desktop 建立網站所需檔案123456789101112131415161718192021222324252627282930313233$ hexo init testINFO Cloning hexo-starter https:&#x2F;&#x2F;github.com&#x2F;hexojs&#x2F;hexo-starter.gitCloning into &#39;C:\\Users\\user\\Desktop\\test&#39;...remote: Enumerating objects: 30, done.remote: Counting objects: 100% (30&#x2F;30), done.remote: Compressing objects: 100% (24&#x2F;24), done.Receiving objects: 100% (161&#x2F;161), 31.79 KiB | 4.54 MiB&#x2F;s, done.Resolving deltas: 100% (74&#x2F;74), done.Submodule &#39;themes&#x2F;landscape&#39; (https:&#x2F;&#x2F;github.com&#x2F;hexojs&#x2F;hexo-theme-landscape.git) registered for path &#39;themes&#x2F;landscape&#39;Cloning into &#39;C:&#x2F;Users&#x2F;user&#x2F;Desktop&#x2F;test&#x2F;themes&#x2F;landscape&#39;...remote: Enumerating objects: 1054, done.remote: Total 1054 (delta 0), reused 0 (delta 0), pack-reused 1054Receiving objects: 100% (1054&#x2F;1054), 3.21 MiB | 1.91 MiB&#x2F;s, done.Resolving deltas: 100% (581&#x2F;581), done.Submodule path &#39;themes&#x2F;landscape&#39;: checked out &#39;73a23c51f8487cfcd7c6deec96ccc7543960d350&#39;INFO Install dependencies&gt; ejs@2.7.4 postinstall C:\\Users\\user\\Desktop\\test\\node_modules\\ejs&gt; node .&#x2F;postinstall.jsThank you for installing EJS: built with the Jake JavaScript build tool (https:&#x2F;&#x2F;jakejs.com&#x2F;)npm notice created a lockfile as package-lock.json. You should commit this file.npm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@1.2.11 (node_modules\\nunjucks\\node_modules\\fsevents):npm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform for fsevents@1.2.11: wanted &#123;&quot;os&quot;:&quot;darwin&quot;,&quot;arch&quot;:&quot;any&quot;&#125; (current: &#123;&quot;os&quot;:&quot;win32&quot;,&quot;arch&quot;:&quot;x64&quot;&#125;)npm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@2.1.2 (node_modules\\fsevents):npm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform for fsevents@2.1.2: wanted &#123;&quot;os&quot;:&quot;darwin&quot;,&quot;arch&quot;:&quot;any&quot;&#125; (current: &#123;&quot;os&quot;:&quot;win32&quot;,&quot;arch&quot;:&quot;x64&quot;&#125;)added 371 packages from 472 contributors and audited 2643 packages in 31.54sfound 0 vulnerabilitiesINFO Start blogging with Hexo! 現在的目錄結構變成這樣1234567891011121314151617181920212223test├─node_modules│ ├─...├─scaffolds├─source│ └─_posts└─themes └─landscape ├─languages ├─layout │ ├─_partial │ │ └─post │ └─_widget ├─scripts └─source ├─css │ ├─fonts │ ├─images │ ├─_partial │ └─_util ├─fancybox │ └─helpers └─js 進到資料夾中1$ cd test\\ 安裝相關套件12345678$ npm installnpm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@2.1.2 (node_modules\\fsevents):npm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform for fsevents@2.1.2: wanted &#123;&quot;os&quot;:&quot;darwin&quot;,&quot;arch&quot;:&quot;any&quot;&#125; (current: &#123;&quot;os&quot;:&quot;win32&quot;,&quot;arch&quot;:&quot;x64&quot;&#125;)npm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@1.2.11 (node_modules\\nunjucks\\node_modules\\fsevents):npm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform for fsevents@1.2.11: wanted &#123;&quot;os&quot;:&quot;darwin&quot;,&quot;arch&quot;:&quot;any&quot;&#125; (current: &#123;&quot;os&quot;:&quot;win32&quot;,&quot;arch&quot;:&quot;x64&quot;&#125;)audited 2643 packages in 4.048sfound 0 vulnerabilities 建立網站 產生靜態網站1234567891011121314151617181920212223242526272829303132$ hexo gINFO Start processingINFO Files loaded in 191 msINFO Generated: index.htmlINFO Generated: archives&#x2F;index.htmlINFO Generated: fancybox&#x2F;blank.gifINFO Generated: fancybox&#x2F;jquery.fancybox.cssINFO Generated: fancybox&#x2F;fancybox_loading.gifINFO Generated: fancybox&#x2F;jquery.fancybox.pack.jsINFO Generated: fancybox&#x2F;jquery.fancybox.jsINFO Generated: fancybox&#x2F;fancybox_loading@2x.gifINFO Generated: fancybox&#x2F;fancybox_overlay.pngINFO Generated: fancybox&#x2F;fancybox_sprite.pngINFO Generated: fancybox&#x2F;fancybox_sprite@2x.pngINFO Generated: archives&#x2F;2020&#x2F;01&#x2F;index.htmlINFO Generated: archives&#x2F;2020&#x2F;index.htmlINFO Generated: css&#x2F;fonts&#x2F;fontawesome-webfont.eotINFO Generated: fancybox&#x2F;helpers&#x2F;jquery.fancybox-media.jsINFO Generated: fancybox&#x2F;helpers&#x2F;jquery.fancybox-buttons.cssINFO Generated: js&#x2F;script.jsINFO Generated: fancybox&#x2F;helpers&#x2F;jquery.fancybox-thumbs.cssINFO Generated: fancybox&#x2F;helpers&#x2F;jquery.fancybox-thumbs.jsINFO Generated: css&#x2F;fonts&#x2F;fontawesome-webfont.woffINFO Generated: fancybox&#x2F;helpers&#x2F;jquery.fancybox-buttons.jsINFO Generated: fancybox&#x2F;helpers&#x2F;fancybox_buttons.pngINFO Generated: css&#x2F;fonts&#x2F;fontawesome-webfont.svgINFO Generated: css&#x2F;style.cssINFO Generated: css&#x2F;fonts&#x2F;fontawesome-webfont.ttfINFO Generated: css&#x2F;fonts&#x2F;FontAwesome.otfINFO Generated: 2020&#x2F;01&#x2F;03&#x2F;hello-world&#x2F;index.htmlINFO Generated: css&#x2F;images&#x2F;banner.jpgINFO 28 files generated in 533 ms 多了一個 public\\ 資料夾出來，目錄結構如下1234567891011121314public├─2020│ └─01│ └─03│ └─hello-world├─archives│ └─2020│ └─01├─css│ ├─fonts│ └─images├─fancybox│ └─helpers└─js 啟動本地服務器123$ hexo serverINFO Start processingINFO Hexo is running at http:&#x2F;&#x2F;localhost:4000 . Press Ctrl+C to stop. 前往 http://localhost:4000 顯示範例網站 Ctrl+ C 停止服務器 建立文章 執行創建文章的指令 12$ hexo new &quot;post title&quot;INFO Created: ~\\Desktop\\test\\source\\_posts\\post-title.md 在 \\source\\_posts 底下新增了一個叫 post-title.md 的檔案打開檔案後，可以看到已經有些內容在裡面是剛剛打的標題和創建文章的時間 12345---title: post titledate: 2020-01-03 23:25:41tags:--- 試著在下面打一些內容，並儲存 123456789101112131415161718192021222324252627282930313233343536---title: post titledate: 2020-01-03 23:25:41tags:---# H1## H2### H3#### H4##### H5###### H6_下劃線_**兩個星號**~~兩個波浪~~&gt; 引用區塊- 無序列表- 無序列表- 無序列表1. 有序列表2. 有序列表3. 有序列表[連結文字](https:&#x2F;&#x2F;www.google.com)頭尾使用 &#96;反引號&#96; 包起來​&#96;&#96;&#96;javascriptvar s &#x3D; &quot;JavaScript&quot;;alert(s);&#96;&#96; &#96; 再次產生靜態網站 12345678910$ hexo gINFO Start processingINFO Files loaded in 168 msINFO Generated: archives&#x2F;index.htmlINFO Generated: 2020&#x2F;01&#x2F;03&#x2F;hello-world&#x2F;index.htmlINFO Generated: index.htmlINFO Generated: archives&#x2F;2020&#x2F;01&#x2F;index.htmlINFO Generated: archives&#x2F;2020&#x2F;index.htmlINFO Generated: 2020&#x2F;01&#x2F;03&#x2F;post-title&#x2F;index.htmlINFO 6 files generated in 52 ms 再次啟動服務器 123$ hexo serverINFO Start processingINFO Hexo is running at http:&#x2F;&#x2F;localhost:4000 . Press Ctrl+C to stop. 前往 http://localhost:4000/test/2020/01/03/post-title/ 可以看到新文章出現 部署網站 安裝 Git 部署套件123456789$ npm install hexo-deployer-git --savenpm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@2.1.2 (node_modules\\fsevents):npm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform for fsevents@2.1.2: wanted &#123;&quot;os&quot;:&quot;darwin&quot;,&quot;arch&quot;:&quot;any&quot;&#125; (current: &#123;&quot;os&quot;:&quot;win32&quot;,&quot;arch&quot;:&quot;x64&quot;&#125;)npm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@1.2.11 (node_modules\\nunjucks\\node_modules\\fsevents):npm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform for fsevents@1.2.11: wanted &#123;&quot;os&quot;:&quot;darwin&quot;,&quot;arch&quot;:&quot;any&quot;&#125; (current: &#123;&quot;os&quot;:&quot;win32&quot;,&quot;arch&quot;:&quot;x64&quot;&#125;)+ hexo-deployer-git@2.1.0added 1 package from 1 contributor and audited 2744 packages in 6.991sfound 0 vulnerabilities 開啟 _config.yml，編寫以下的值，並儲存檔案12345678# URLurl: https:&#x2F;&#x2F;&lt;username&gt;.github.ioroot: &#x2F;&lt;reponame&gt;&#x2F;deploy: type: git repo: git@github.com:&lt;username&gt;&#x2F;&lt;reponame&gt;.git branch: master 部署到 GitHub12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485$ hexo dINFO Deploying: gitINFO Setting up Git deployment...Initialized empty Git repository in C:&#x2F;Users&#x2F;user&#x2F;Desktop&#x2F;test&#x2F;.deploy_git&#x2F;.git&#x2F;[master (root-commit) 5f12877] First commit 1 file changed, 0 insertions(+), 0 deletions(-) create mode 100644 placeholderINFO Clearing .deploy_git folder...INFO Copying files from public folder...INFO Copying files from extend dirs...warning: LF will be replaced by CRLF in 2020&#x2F;01&#x2F;03&#x2F;hello-world&#x2F;index.html.The file will have its original line endings in your working directorywarning: LF will be replaced by CRLF in 2020&#x2F;01&#x2F;03&#x2F;post-title&#x2F;index.html.The file will have its original line endings in your working directorywarning: LF will be replaced by CRLF in archives&#x2F;2020&#x2F;01&#x2F;index.html.The file will have its original line endings in your working directorywarning: LF will be replaced by CRLF in archives&#x2F;2020&#x2F;index.html.The file will have its original line endings in your working directorywarning: LF will be replaced by CRLF in archives&#x2F;index.html.The file will have its original line endings in your working directorywarning: LF will be replaced by CRLF in css&#x2F;style.css.The file will have its original line endings in your working directorywarning: LF will be replaced by CRLF in fancybox&#x2F;helpers&#x2F;jquery.fancybox-buttons.css.The file will have its original line endings in your working directorywarning: LF will be replaced by CRLF in fancybox&#x2F;helpers&#x2F;jquery.fancybox-buttons.js.The file will have its original line endings in your working directorywarning: LF will be replaced by CRLF in fancybox&#x2F;helpers&#x2F;jquery.fancybox-media.js.The file will have its original line endings in your working directorywarning: LF will be replaced by CRLF in fancybox&#x2F;helpers&#x2F;jquery.fancybox-thumbs.css.The file will have its original line endings in your working directorywarning: LF will be replaced by CRLF in fancybox&#x2F;helpers&#x2F;jquery.fancybox-thumbs.js.The file will have its original line endings in your working directorywarning: LF will be replaced by CRLF in fancybox&#x2F;jquery.fancybox.css.The file will have its original line endings in your working directorywarning: LF will be replaced by CRLF in fancybox&#x2F;jquery.fancybox.js.The file will have its original line endings in your working directorywarning: LF will be replaced by CRLF in fancybox&#x2F;jquery.fancybox.pack.js.The file will have its original line endings in your working directorywarning: LF will be replaced by CRLF in index.html.The file will have its original line endings in your working directorywarning: LF will be replaced by CRLF in js&#x2F;script.js.The file will have its original line endings in your working directory[master 4b0880d] Site updated: 2020-01-04 11:26:09 30 files changed, 6185 insertions(+) create mode 100644 2020&#x2F;01&#x2F;03&#x2F;hello-world&#x2F;index.html create mode 100644 2020&#x2F;01&#x2F;03&#x2F;post-title&#x2F;index.html create mode 100644 archives&#x2F;2020&#x2F;01&#x2F;index.html create mode 100644 archives&#x2F;2020&#x2F;index.html create mode 100644 archives&#x2F;index.html create mode 100644 css&#x2F;fonts&#x2F;FontAwesome.otf create mode 100644 css&#x2F;fonts&#x2F;fontawesome-webfont.eot create mode 100644 css&#x2F;fonts&#x2F;fontawesome-webfont.svg create mode 100644 css&#x2F;fonts&#x2F;fontawesome-webfont.ttf create mode 100644 css&#x2F;fonts&#x2F;fontawesome-webfont.woff create mode 100644 css&#x2F;images&#x2F;banner.jpg create mode 100644 css&#x2F;style.css create mode 100644 fancybox&#x2F;blank.gif create mode 100644 fancybox&#x2F;fancybox_loading.gif create mode 100644 fancybox&#x2F;fancybox_loading@2x.gif create mode 100644 fancybox&#x2F;fancybox_overlay.png create mode 100644 fancybox&#x2F;fancybox_sprite.png create mode 100644 fancybox&#x2F;fancybox_sprite@2x.png create mode 100644 fancybox&#x2F;helpers&#x2F;fancybox_buttons.png create mode 100644 fancybox&#x2F;helpers&#x2F;jquery.fancybox-buttons.css create mode 100644 fancybox&#x2F;helpers&#x2F;jquery.fancybox-buttons.js create mode 100644 fancybox&#x2F;helpers&#x2F;jquery.fancybox-media.js create mode 100644 fancybox&#x2F;helpers&#x2F;jquery.fancybox-thumbs.css create mode 100644 fancybox&#x2F;helpers&#x2F;jquery.fancybox-thumbs.js create mode 100644 fancybox&#x2F;jquery.fancybox.css create mode 100644 fancybox&#x2F;jquery.fancybox.js create mode 100644 fancybox&#x2F;jquery.fancybox.pack.js create mode 100644 index.html create mode 100644 js&#x2F;script.js delete mode 100644 placeholderEnumerating objects: 48, done.Counting objects: 100% (48&#x2F;48), done.Delta compression using up to 8 threadsCompressing objects: 100% (38&#x2F;38), done.Writing objects: 100% (48&#x2F;48), 508.32 KiB | 2.35 MiB&#x2F;s, done.Total 48 (delta 5), reused 0 (delta 0)remote: Resolving deltas: 100% (5&#x2F;5), done.To github.com:annkuoQ&#x2F;test.git + 6e14434...e701c89 HEAD -&gt; master (forced update)Branch &#39;master&#39; set up to track remote branch &#39;master&#39; from &#39;git@github.com:annkuoQ&#x2F;test.git&#39;.INFO Deploy done: git 前往 https://annkuoQ.github.io/test 就可以看到自己的網站囉(開啟 GitHub Pages 功能需要一點時間，若頁面還沒出來，讓子彈飛一下) 參考資料 Hexo 官方文件 Hexo静态网页制作教程 Hexo + Github Pages：手把手教你打造免費個人部落格","categories":[{"name":"資工 / 程設","slug":"資工-程設","permalink":"https://annkuoq.github.io/blog/categories/%E8%B3%87%E5%B7%A5-%E7%A8%8B%E8%A8%AD/"}],"tags":[{"name":"hexo","slug":"hexo","permalink":"https://annkuoq.github.io/blog/tags/hexo/"},{"name":"github pages","slug":"github-pages","permalink":"https://annkuoq.github.io/blog/tags/github-pages/"}]},{"title":"用 Docusaurus 和 GitHub Pages 架網站","slug":"use-docusaurus-to-deploy-github-pages","date":"2019-12-27T15:18:01.000Z","updated":"2020-12-28T12:14:12.994Z","comments":true,"path":"2019-12-27-use-docusaurus-to-deploy-github-pages/","link":"","permalink":"https://annkuoq.github.io/blog/2019-12-27-use-docusaurus-to-deploy-github-pages/","excerpt":"為什麼要用 Docusaurus？ 因為工程師朋友推薦 因為 Slash (恐龍吉祥物) 很可愛 因為是 Facebook 團隊的開源作品很酷 執行環境 Win 10 與 Cmder","text":"為什麼要用 Docusaurus？ 因為工程師朋友推薦 因為 Slash (恐龍吉祥物) 很可愛 因為是 Facebook 團隊的開源作品很酷 執行環境 Win 10 與 Cmder 前置步驟 安裝 Git 安裝 Node.js 創建一個 GitHub Repository 把 Repo clone 到本地端123456$ git clone git@github.com:annkuoQ&#x2F;test.gitCloning into &#39;test&#39;...remote: Enumerating objects: 3, done.remote: Counting objects: 100% (3&#x2F;3), done.remote: Total 3 (delta 0), reused 0 (delta 0), pack-reused 0Receiving objects: 100% (3&#x2F;3), done. 安裝步驟 安裝 init 腳本1234$ npm install --global docusaurus-initC:\\Program Files\\nodejs\\node_global\\docusaurus-init -&gt; C:\\Program Files\\nodejs\\node_global\\node_modules\\docusaurus-init\\initialize.js+ docusaurus-init@1.14.1added 24 packages from 14 contributors in 1.564s cd 到 Repo1$ cd test\\ 安裝基礎架構1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283848586878889909192939495969798$ docusaurus-initWebsite folder created!Installing latest version of Docusaurus in website.npm WARN deprecated core-js@2.6.11: core-js@&lt;3 is no longer maintained and not recommended for usage due to the number of issues. Please, upgrade your dependencies to the actual version of core-js@3.npm WARN deprecated coffee-script@1.12.7: CoffeeScript on NPM has moved to &quot;coffeescript&quot; (no hyphen)npm WARN deprecated gulp-header@1.8.12: Removed event-stream from gulp-header&gt; core-js@2.6.11 postinstall C:\\Users\\user\\Desktop\\test\\website\\node_modules\\core-js&gt; node -e &quot;try&#123;require(&#39;.&#x2F;postinstall&#39;)&#125;catch(e)&#123;&#125;&quot;Thank you for using core-js ( https:&#x2F;&#x2F;github.com&#x2F;zloirock&#x2F;core-js ) for polyfilling JavaScript standard library!The project needs your help! Please consider supporting of core-js on Open Collective or Patreon:&gt; https:&#x2F;&#x2F;opencollective.com&#x2F;core-js&gt; https:&#x2F;&#x2F;www.patreon.com&#x2F;zloirockAlso, the author of core-js ( https:&#x2F;&#x2F;github.com&#x2F;zloirock ) is looking for a good job -)&gt; gifsicle@4.0.1 postinstall C:\\Users\\user\\Desktop\\test\\website\\node_modules\\gifsicle&gt; node lib&#x2F;install.js √ gifsicle pre-build test passed successfully&gt; jpegtran-bin@4.0.0 postinstall C:\\Users\\user\\Desktop\\test\\website\\node_modules\\jpegtran-bin&gt; node lib&#x2F;install.js √ jpegtran pre-build test passed successfully&gt; optipng-bin@5.1.0 postinstall C:\\Users\\user\\Desktop\\test\\website\\node_modules\\optipng-bin&gt; node lib&#x2F;install.js √ optipng pre-build test passed successfullynpm notice created a lockfile as package-lock.json. You should commit this file.npm WARN website No descriptionnpm WARN website No repository field.npm WARN website No license field.npm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@1.2.11 (node_modules\\fsevents):npm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform for fsevents@1.2.11: wanted &#123;&quot;os&quot;:&quot;darwin&quot;,&quot;arch&quot;:&quot;any&quot;&#125; (current: &#123;&quot;os&quot;:&quot;win32&quot;,&quot;arch&quot;:&quot;x64&quot;&#125;)+ docusaurus@1.14.3added 1003 packages from 806 contributors and audited 10425 packages in 102.34sfound 0 vulnerabilitiesDocusaurus installed in website folder!&gt; @ examples C:\\Users\\user\\Desktop\\test\\website&gt; docusaurus-examplesWrote docusaurus scripts to package.json file.test├── docker-compose.yml├── Dockerfile├── docs│ ├── doc1.md│ ├── doc2.md│ ├── doc3.md│ ├── exampledoc4.md│ └── exampledoc5.md├── README.md└── website ├── blog │ ├── 2016-03-11-blog-post.md │ ├── 2017-04-10-blog-post-two.md │ ├── 2017-09-25-testing-rss.md │ ├── 2017-09-26-adding-rss.md │ └── 2017-10-24-new-version-1.0.0.md ├── core │ └── Footer.js ├── package-lock.json ├── package.json ├── pages │ └── en │ ├── help.js │ ├── index.js │ └── users.js ├── README.md ├── sidebars.json ├── siteConfig.js └── static ├── css │ └── custom.css └── img ├── favicon.ico ├── oss_logo.png ├── undraw_code_review.svg ├── undraw_monitor.svg ├── undraw_note_list.svg ├── undraw_online.svg ├── undraw_open_source.svg ├── undraw_operating_system.svg ├── undraw_react.svg ├── undraw_tweetstorm.svg └── undraw_youtube_tutorial.svg 現在的目錄結構變成這樣123456789101112131415161718192021222324root-directory├── Dockerfile├── README.md├── docker-compose.yml├── docs│ ├── doc1.md│ ├── doc2.md│ ├── doc3.md│ ├── exampledoc4.md│ └── exampledoc5.md└── website ├── blog │ ├── 2016-03-11-blog-post.md │ ├── 2017-04-10-blog-post-two.md │ ├── 2017-09-25-testing-rss.md │ ├── 2017-09-26-adding-rss.md │ └── 2017-10-24-new-version-1.0.0.md ├── core │ └── Footer.js ├── package.json ├── pages ├── sidebars.json ├── siteConfig.js └── static 移動到 website 目錄1$ cd website\\ 執行 npm start1234567$ npm start&gt; @ start C:\\Users\\user\\Desktop\\test\\website&gt; docusaurus-startLiveReload server started on port 35729Docusaurus server started on port 3000 瀏覽器自動前往 http://localhost:3000/ 顯示範例網站 創建頁面一般頁面 在 website/pages/en 創建一個叫做 hello-world.js 的檔案，內容為:12345678910111213141516171819const React &#x3D; require(&#39;react&#39;);const CompLibrary &#x3D; require(&#39;..&#x2F;..&#x2F;core&#x2F;CompLibrary.js&#39;);const Container &#x3D; CompLibrary.Container;const GridBlock &#x3D; CompLibrary.GridBlock;function HelloWorld(props) &#123; return ( &lt;div className&#x3D;&quot;docMainWrapper wrapper&quot;&gt; &lt;Container className&#x3D;&quot;mainContainer documentContainer postContainer&quot;&gt; &lt;h1&gt;Hello World!&lt;&#x2F;h1&gt; &lt;p&gt;This is my first page!&lt;&#x2F;p&gt; &lt;&#x2F;Container&gt; &lt;&#x2F;div&gt; );&#125;module.exports &#x3D; HelloWorld; 瀏覽器前往 http://localhost:3000/hello-world 可以看到新頁面 修改 hello-world.js 的內容12- &lt;p&gt;This is my first page!&lt;&#x2F;p&gt;+ &lt;p&gt;I can write JSX here!&lt;&#x2F;p&gt; 儲存檔案後，瀏覽器會自動刷新頁面，顯示修改的字 文件頁面 在 \\docs 創建一個叫 doc9.md 的檔案，內容為: 1234567891011121314151617---id: doc9title: This is Doc 9---I can write content using [GitHub-flavored Markdown syntax](https:&#x2F;&#x2F;github.github.com&#x2F;gfm&#x2F;).## Markdown Syntax**Bold** _italic_ &#96;code&#96; [Links](#url)&gt; Donec sit amet nisl. Aliquam semper ipsum sit amet velit. Suspendisse&gt; id sem consectetuer libero luctus adipiscing.* Hey* Ho* Let&#39;s Go 開啟 \\website\\sidebars.json，在 doc1 後加入 doc9 12345678910111213&#123; &quot;docs&quot;: &#123; &quot;Docusaurus&quot;: [ &quot;doc1&quot;,+ &quot;doc9&quot; ], &quot;First Category&quot;: [&quot;doc2&quot;], &quot;Second Category&quot;: [&quot;doc3&quot;] &#125;, &quot;docs-other&quot;: &#123; &quot;First Category&quot;: [&quot;doc4&quot;, &quot;doc5&quot;] &#125;&#125; Ctrl+ C 停止服務器後，再 npm start 瀏覽器前往 http://localhost:3000/docs/doc9 可以看到側邊欄已更新 Ctrl+ C 停止服務器 發布網站 開啟 siteConfig.js，編寫以下的值，並儲存檔案12345678const siteConfig &#x3D; &#123; ... url: &#39;https:&#x2F;&#x2F;annkuoq.github.io&#39;, (GitHub Pages Host 網址) baseUrl: &#39;&#x2F;test&#x2F;&#39;, (GitHub Project 名稱) projectName: &#39;test&#39;, (GitHub Project 名稱) organizationName: &#39;annkuoQ&#39; (GitHub 的用戶名稱) ...&#125; 在 website/ 執行 npm run build12345678910$ npm run build&gt; @ build C:\\Users\\user\\Desktop\\test\\website&gt; docusaurus-buildgenerate.js triggered...feed.js triggered...feed.js triggered...sitemap.js triggered...Site built successfully. Generated files in &#39;build&#39; folder. 在 website/ 多了一個 build 資料夾，裡面有所有文件和其他頁面的 html 檔123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120build└─test │ hello-world.html │ help.html │ index.html │ sitemap.xml │ users.html │ ├─blog │ │ atom.xml │ │ feed.xml │ │ index.html │ │ │ ├─2016 │ │ └─03 │ │ └─11 │ │ │ blog-post.html │ │ │ │ │ └─blog-post │ │ index.html │ │ │ └─2017 │ ├─04 │ │ └─10 │ │ │ blog-post-two.html │ │ │ │ │ └─blog-post-two │ │ index.html │ │ │ ├─09 │ │ ├─25 │ │ │ │ testing-rss.html │ │ │ │ │ │ │ └─testing-rss │ │ │ index.html │ │ │ │ │ └─26 │ │ │ adding-rss.html │ │ │ │ │ └─adding-rss │ │ index.html │ │ │ └─10 │ └─24 │ │ new-version-1.0.0.html │ │ │ └─new-version-1.0.0 │ index.html │ ├─css │ main.css │ prism.css │ ├─docs │ │ doc1.html │ │ doc2.html │ │ doc3.html │ │ doc4.html │ │ doc5.html │ │ doc9.html │ │ │ ├─doc1 │ │ index.html │ │ │ ├─doc2 │ │ index.html │ │ │ ├─doc3 │ │ index.html │ │ │ ├─doc4 │ │ index.html │ │ │ ├─doc5 │ │ index.html │ │ │ └─doc9 │ index.html │ ├─en │ │ hello-world.html │ │ help.html │ │ index.html │ │ users.html │ │ │ ├─hello-world │ │ index.html │ │ │ ├─help │ │ index.html │ │ │ └─users │ index.html │ ├─hello-world │ index.html │ ├─help │ index.html │ ├─img │ favicon.ico │ language.svg │ oss_logo.png │ undraw_code_review.svg │ undraw_monitor.svg │ undraw_note_list.svg │ undraw_online.svg │ undraw_open_source.svg │ undraw_operating_system.svg │ undraw_react.svg │ undraw_tweetstorm.svg │ undraw_youtube_tutorial.svg │ ├─js │ codetabs.js │ scrollSpy.js │ └─users index.html 設定三個環境變數123GIT_USER&#x3D;annkuoQCURRENT_BRANCH&#x3D;masterUSE_SSH&#x3D;true 執行發布指令123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153$ npm run publish-gh-pages&gt; @ publish-gh-pages C:\\Users\\user\\Desktop\\test\\website&gt; docusaurus-publishmastergit@github.com:annkuoQ&#x2F;test.gitgenerate.js triggered...feed.js triggered...feed.js triggered...sitemap.js triggered...Site built successfully. Generated files in &#39;build&#39; folder.269ea5df776da07e69b1bbb5cbd0218818567b37Cloning into &#39;test-gh-pages&#39;...mastererror: pathspec &#39;origin&#x2F;gh-pages&#39; did not match any file(s) known to gitSwitched to a new branch &#39;gh-pages&#39;rm &#39;README.md&#39;warning: LF will be replaced by CRLF in blog&#x2F;2016&#x2F;03&#x2F;11&#x2F;blog-post.html.The file will have its original line endings in your working directorywarning: LF will be replaced by CRLF in blog&#x2F;2016&#x2F;03&#x2F;11&#x2F;blog-post&#x2F;index.html.The file will have its original line endings in your working directorywarning: LF will be replaced by CRLF in blog&#x2F;2017&#x2F;04&#x2F;10&#x2F;blog-post-two.html.The file will have its original line endings in your working directorywarning: LF will be replaced by CRLF in blog&#x2F;2017&#x2F;04&#x2F;10&#x2F;blog-post-two&#x2F;index.html.The file will have its original line endings in your working directorywarning: LF will be replaced by CRLF in blog&#x2F;2017&#x2F;09&#x2F;25&#x2F;testing-rss.html.The file will have its original line endings in your working directorywarning: LF will be replaced by CRLF in blog&#x2F;2017&#x2F;09&#x2F;25&#x2F;testing-rss&#x2F;index.html.The file will have its original line endings in your working directorywarning: LF will be replaced by CRLF in blog&#x2F;2017&#x2F;09&#x2F;26&#x2F;adding-rss.html.The file will have its original line endings in your working directorywarning: LF will be replaced by CRLF in blog&#x2F;2017&#x2F;09&#x2F;26&#x2F;adding-rss&#x2F;index.html.The file will have its original line endings in your working directorywarning: LF will be replaced by CRLF in blog&#x2F;2017&#x2F;10&#x2F;24&#x2F;new-version-1.0.0.html.The file will have its original line endings in your working directorywarning: LF will be replaced by CRLF in blog&#x2F;2017&#x2F;10&#x2F;24&#x2F;new-version-1.0.0&#x2F;index.html.The file will have its original line endings in your working directorywarning: LF will be replaced by CRLF in blog&#x2F;atom.xml.The file will have its original line endings in your working directorywarning: LF will be replaced by CRLF in blog&#x2F;feed.xml.The file will have its original line endings in your working directorywarning: LF will be replaced by CRLF in blog&#x2F;index.html.The file will have its original line endings in your working directorywarning: LF will be replaced by CRLF in css&#x2F;prism.css.The file will have its original line endings in your working directorywarning: LF will be replaced by CRLF in docs&#x2F;doc1.html.The file will have its original line endings in your working directorywarning: LF will be replaced by CRLF in docs&#x2F;doc1&#x2F;index.html.The file will have its original line endings in your working directorywarning: LF will be replaced by CRLF in docs&#x2F;doc2.html.The file will have its original line endings in your working directorywarning: LF will be replaced by CRLF in docs&#x2F;doc2&#x2F;index.html.The file will have its original line endings in your working directorywarning: LF will be replaced by CRLF in docs&#x2F;doc3.html.The file will have its original line endings in your working directorywarning: LF will be replaced by CRLF in docs&#x2F;doc3&#x2F;index.html.The file will have its original line endings in your working directorywarning: LF will be replaced by CRLF in docs&#x2F;doc4.html.The file will have its original line endings in your working directorywarning: LF will be replaced by CRLF in docs&#x2F;doc4&#x2F;index.html.The file will have its original line endings in your working directorywarning: LF will be replaced by CRLF in docs&#x2F;doc5.html.The file will have its original line endings in your working directorywarning: LF will be replaced by CRLF in docs&#x2F;doc5&#x2F;index.html.The file will have its original line endings in your working directorywarning: LF will be replaced by CRLF in docs&#x2F;doc9.html.The file will have its original line endings in your working directorywarning: LF will be replaced by CRLF in docs&#x2F;doc9&#x2F;index.html.The file will have its original line endings in your working directorywarning: LF will be replaced by CRLF in en&#x2F;help.html.The file will have its original line endings in your working directorywarning: LF will be replaced by CRLF in en&#x2F;help&#x2F;index.html.The file will have its original line endings in your working directorywarning: LF will be replaced by CRLF in en&#x2F;index.html.The file will have its original line endings in your working directorywarning: LF will be replaced by CRLF in help.html.The file will have its original line endings in your working directorywarning: LF will be replaced by CRLF in help&#x2F;index.html.The file will have its original line endings in your working directorywarning: LF will be replaced by CRLF in img&#x2F;language.svg.The file will have its original line endings in your working directorywarning: LF will be replaced by CRLF in index.html.The file will have its original line endings in your working directorywarning: LF will be replaced by CRLF in js&#x2F;codetabs.js.The file will have its original line endings in your working directorywarning: LF will be replaced by CRLF in js&#x2F;scrollSpy.js.The file will have its original line endings in your working directory[gh-pages (root-commit) cefa7df] Deploy website 56 files changed, 1856 insertions(+) create mode 100644 blog&#x2F;2016&#x2F;03&#x2F;11&#x2F;blog-post.html create mode 100644 blog&#x2F;2016&#x2F;03&#x2F;11&#x2F;blog-post&#x2F;index.html create mode 100644 blog&#x2F;2017&#x2F;04&#x2F;10&#x2F;blog-post-two.html create mode 100644 blog&#x2F;2017&#x2F;04&#x2F;10&#x2F;blog-post-two&#x2F;index.html create mode 100644 blog&#x2F;2017&#x2F;09&#x2F;25&#x2F;testing-rss.html create mode 100644 blog&#x2F;2017&#x2F;09&#x2F;25&#x2F;testing-rss&#x2F;index.html create mode 100644 blog&#x2F;2017&#x2F;09&#x2F;26&#x2F;adding-rss.html create mode 100644 blog&#x2F;2017&#x2F;09&#x2F;26&#x2F;adding-rss&#x2F;index.html create mode 100644 blog&#x2F;2017&#x2F;10&#x2F;24&#x2F;new-version-1.0.0.html create mode 100644 blog&#x2F;2017&#x2F;10&#x2F;24&#x2F;new-version-1.0.0&#x2F;index.html create mode 100644 blog&#x2F;atom.xml create mode 100644 blog&#x2F;feed.xml create mode 100644 blog&#x2F;index.html create mode 100644 css&#x2F;main.css create mode 100644 css&#x2F;prism.css create mode 100644 docs&#x2F;doc1.html create mode 100644 docs&#x2F;doc1&#x2F;index.html create mode 100644 docs&#x2F;doc2.html create mode 100644 docs&#x2F;doc2&#x2F;index.html create mode 100644 docs&#x2F;doc3.html create mode 100644 docs&#x2F;doc3&#x2F;index.html create mode 100644 docs&#x2F;doc4.html create mode 100644 docs&#x2F;doc4&#x2F;index.html create mode 100644 docs&#x2F;doc5.html create mode 100644 docs&#x2F;doc5&#x2F;index.html create mode 100644 docs&#x2F;doc9.html create mode 100644 docs&#x2F;doc9&#x2F;index.html create mode 100644 en&#x2F;hello-world.html create mode 100644 en&#x2F;hello-world&#x2F;index.html create mode 100644 en&#x2F;help.html create mode 100644 en&#x2F;help&#x2F;index.html create mode 100644 en&#x2F;index.html create mode 100644 en&#x2F;users.html create mode 100644 en&#x2F;users&#x2F;index.html create mode 100644 hello-world.html create mode 100644 hello-world&#x2F;index.html create mode 100644 help.html create mode 100644 help&#x2F;index.html create mode 100644 img&#x2F;favicon.ico create mode 100644 img&#x2F;language.svg create mode 100644 img&#x2F;oss_logo.png create mode 100644 img&#x2F;undraw_code_review.svg create mode 100644 img&#x2F;undraw_monitor.svg create mode 100644 img&#x2F;undraw_note_list.svg create mode 100644 img&#x2F;undraw_online.svg create mode 100644 img&#x2F;undraw_open_source.svg create mode 100644 img&#x2F;undraw_operating_system.svg create mode 100644 img&#x2F;undraw_react.svg create mode 100644 img&#x2F;undraw_tweetstorm.svg create mode 100644 img&#x2F;undraw_youtube_tutorial.svg create mode 100644 index.html create mode 100644 js&#x2F;codetabs.js create mode 100644 js&#x2F;scrollSpy.js create mode 100644 sitemap.xml create mode 100644 users.html create mode 100644 users&#x2F;index.htmlremote:remote: Create a pull request for &#39;gh-pages&#39; on GitHub by visiting:remote: https:&#x2F;&#x2F;github.com&#x2F;annkuoQ&#x2F;test&#x2F;pull&#x2F;new&#x2F;gh-pagesremote:To github.com:annkuoQ&#x2F;test.git * [new branch] gh-pages -&gt; gh-pagesWebsite is live at: https:&#x2F;&#x2F;annkuoQ.github.io&#x2F;test 前往 https://annkuoQ.github.io/test 就可以看到自己的網站囉(開啟 GitHub Pages 功能需要一點時間，若頁面還沒出來，讓子彈飛一下) 參考資料 Docusaurus 官方教學 Docusaurus 是如何運作的 Docusaurus 官方 GitHub","categories":[{"name":"資工 / 程設","slug":"資工-程設","permalink":"https://annkuoq.github.io/blog/categories/%E8%B3%87%E5%B7%A5-%E7%A8%8B%E8%A8%AD/"}],"tags":[{"name":"github pages","slug":"github-pages","permalink":"https://annkuoq.github.io/blog/tags/github-pages/"},{"name":"docusaurus","slug":"docusaurus","permalink":"https://annkuoq.github.io/blog/tags/docusaurus/"}]},{"title":"Win 10 安裝 FFmpeg","slug":"install-ffmpeg","date":"2019-12-17T04:25:39.000Z","updated":"2021-03-09T12:27:43.242Z","comments":true,"path":"2019-12-17-install-ffmpeg/","link":"","permalink":"https://annkuoq.github.io/blog/2019-12-17-install-ffmpeg/","excerpt":"為什麼要安裝 FFmepg？ 因為開源、彈性大 因為轉檔、分析、播放、剪接、字幕、濾鏡都做得到","text":"為什麼要安裝 FFmepg？ 因為開源、彈性大 因為轉檔、分析、播放、剪接、字幕、濾鏡都做得到 安裝步驟 前往官網 下載，我下載的版本是- Version: 4.2.1 (穩定版本)- Architecture: Windows 64-bit (作業系統)- Linking: Static (打包好的靜態函式庫) ffmpeg.zeranoe.com 已於 2020 年 9 月 18 日 關閉目前有兩個地方可以下載 gyan.dev BtbN 我選擇去 gyan.dev 下載往下拉到 release 的部分有四個連結點擊第一個 release-full.7z 下載","categories":[{"name":"轉檔 / 編碼","slug":"轉檔-編碼","permalink":"https://annkuoq.github.io/blog/categories/%E8%BD%89%E6%AA%94-%E7%B7%A8%E7%A2%BC/"}],"tags":[{"name":"ffmpeg","slug":"ffmpeg","permalink":"https://annkuoq.github.io/blog/tags/ffmpeg/"}]},{"title":"Win 10 安裝 Node.js 和 http-server","slug":"install-nodejs-httpserver","date":"2019-12-16T05:56:25.000Z","updated":"2020-08-08T08:03:19.385Z","comments":true,"path":"2019-12-16-install-nodejs-httpserver/","link":"","permalink":"https://annkuoq.github.io/blog/2019-12-16-install-nodejs-httpserver/","excerpt":"為什麼要安裝 Node.js？ 因為它可以讓後端伺服器跑 JavaScript 為什麼要安裝 http-server？ 因為它可以讓我們的電腦提供 Web Service","text":"為什麼要安裝 Node.js？ 因為它可以讓後端伺服器跑 JavaScript 為什麼要安裝 http-server？ 因為它可以讓我們的電腦提供 Web Service 安裝 Node.js 到 Node.js 官網 下載 目前最新的穩定版本 雙擊執行 node-v12.13.1-x64 不停的點 Next 下一步，並完成安裝 檢查環境變數是否已新增 C:\\Program Files\\nodejs\\ 檢查 Node.js 和 NPM 的版本資訊12345$ node -vv12.13.1$ npm -v6.12.1 環境設定 在 C:\\Program Files\\nodejs 路徑下創建 node_global &amp; node_cache 資料夾 開啟檔案總管對本機按右鍵 &gt; 內容 &gt; 進階系統設定 &gt; 進階 &gt; 環境變數 &gt;點擊系統變數的 Path &gt; 編輯 &gt; 新增 &gt;C:\\Program Files\\nodejs\\node_global 和 C:\\Program Files\\nodejs\\node_modules &gt; 確定 開啟 CMD，輸入 set PATH=C:，讓環境變數立即生效，不用重開機 關閉 CMD 再重啟，輸入 echo %PATH%，查看是否有增加上面兩個路徑 更改 global 和 cache 資料夾路徑 12$ npm config set prefix &quot;C:\\Program Files\\nodejs\\node_global&quot;$ npm config set cache &quot;C:\\Program Files\\nodejs\\node_cache&quot; 安裝與執行 http-server 下安裝指令12345$ npm install http-server -gC:\\Program Files\\nodejs\\node_global\\hs -&gt; C:\\Program Files\\nodejs\\node_global\\node_modules\\http-server\\bin\\http-serverC:\\Program Files\\nodejs\\node_global\\http-server -&gt; C:\\Program Files\\nodejs\\node_global\\node_modules\\http-server\\bin\\http-server+ http-server@0.12.0added 27 packages from 35 contributors in 2.798s 移動到要開放的工作目錄1$ cd C:\\Users\\user\\Desktop\\test 啟動 localhost123456$ http-server . 8080Starting up http-server, serving .Available on: http:&#x2F;&#x2F;192.168.1.114:8080 http:&#x2F;&#x2F;127.0.0.1:8080Hit CTRL-C to stop the server 瀏覽器前往 http://127.0.0.1:8080 ，可以看到 test 目錄的東西 點擊 Ctrl + C 停止 http-server 參考資料 Ndoe.js安装及环境配置(for windows) node安裝後的設置(node_global和node_cache) 更改npm global與cache資料夾路徑","categories":[{"name":"資工 / 程設","slug":"資工-程設","permalink":"https://annkuoq.github.io/blog/categories/%E8%B3%87%E5%B7%A5-%E7%A8%8B%E8%A8%AD/"}],"tags":[{"name":"node.js","slug":"node-js","permalink":"https://annkuoq.github.io/blog/tags/node-js/"},{"name":"http-server","slug":"http-server","permalink":"https://annkuoq.github.io/blog/tags/http-server/"}]},{"title":"更改 Win 10 檔案總管預設開啟位置","slug":"change-file-explorer-open-in-win10","date":"2019-12-15T14:14:43.000Z","updated":"2020-04-28T14:49:50.024Z","comments":true,"path":"2019-12-15-change-file-explorer-open-in-win10/","link":"","permalink":"https://annkuoq.github.io/blog/2019-12-15-change-file-explorer-open-in-win10/","excerpt":"為什麼要更改開啟位置？ Win 10 檔案總管預設是開啟快速存取且會自動顯示常用資料夾與最近使用過的檔案但我只是想趕快到本機","text":"為什麼要更改開啟位置？ Win 10 檔案總管預設是開啟快速存取且會自動顯示常用資料夾與最近使用過的檔案但我只是想趕快到本機 步驟 到 檔案總管 &gt; 對 快速存取 按 右鍵 &gt; 選項 &gt; 一般 開啟檔案總管以 : 本機 隱私權:取消勾選 在「快速存取」中顯示最近使用的檔案取消勾選 在「快速存取」中顯示經常使用的資料夾清除檔案總管歷程記錄 &gt; 清除 點擊 確定 參考資料 Windows 支援 - 在快速存取中釘選、移除及自訂 談Windows 10檔案總管上的 快速存取 運用與移除","categories":[{"name":"電腦 / 硬體","slug":"電腦-硬體","permalink":"https://annkuoq.github.io/blog/categories/%E9%9B%BB%E8%85%A6-%E7%A1%AC%E9%AB%94/"}],"tags":[{"name":"windows","slug":"windows","permalink":"https://annkuoq.github.io/blog/tags/windows/"},{"name":"file explorer","slug":"file-explorer","permalink":"https://annkuoq.github.io/blog/tags/file-explorer/"}]},{"title":"Win 10 使用 Win 7 的相片檢視器","slug":"win7-photoviewer-in-win10","date":"2019-12-14T03:23:35.000Z","updated":"2020-04-28T14:48:40.889Z","comments":true,"path":"2019-12-14-win7-photoviewer-in-win10/","link":"","permalink":"https://annkuoq.github.io/blog/2019-12-14-win7-photoviewer-in-win10/","excerpt":"為什麼要改用 Win 7 的 Windows 相片檢視器？ 因為 Win 10 內建的 相片 APP 開圖片很慢","text":"為什麼要改用 Win 7 的 Windows 相片檢視器？ 因為 Win 10 內建的 相片 APP 開圖片很慢 如果電腦本身有 Windows 相片檢視器方法一 對 開始 按右鍵 &gt; 執行 &gt; 輸入 regedit &gt; 確定 開啟登錄編輯程式後，找到以下路徑1電腦\\HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows Photo Viewer\\Capabilities\\FileAssociations 在空白處按右鍵 &gt; 新增 &gt; 字串符 名稱: 圖檔格式 (e.g. .jpg .jpeg .png .gif .bmp .ico…)數值資料: PhotoViewer.FileAssoc.Tiff(每種圖檔格式都要個別新增) 關閉登錄編輯程式 對任一圖檔按右鍵 &gt; 開啟檔案 &gt; Windows 相片檢視器 方法二 開始 &gt; 設定 &gt; 應用程式 &gt; 預設應用程式 &gt; 相片檢視器 &gt; Windows 相片檢視器 如果電腦沒有 Windows 相片檢視器 開啟 記事本 &gt; 將以下文字存成文字檔 &gt; 檔名改為 PhotoViewer.reg123456789101112131415161718192021222324252627282930313233343536Windows Registry Editor Version 5.00; Change Extension&#39;s File Type[HKEY_CURRENT_USER\\Software\\Classes\\.jpg]@&#x3D;&quot;PhotoViewer.FileAssoc.Tiff&quot;; Change Extension&#39;s File Type[HKEY_CURRENT_USER\\Software\\Classes\\.jpeg]@&#x3D;&quot;PhotoViewer.FileAssoc.Tiff&quot;; Change Extension&#39;s File Type[HKEY_CURRENT_USER\\Software\\Classes\\.gif]@&#x3D;&quot;PhotoViewer.FileAssoc.Tiff&quot;; Change Extension&#39;s File Type[HKEY_CURRENT_USER\\Software\\Classes\\.png]@&#x3D;&quot;PhotoViewer.FileAssoc.Tiff&quot;; Change Extension&#39;s File Type[HKEY_CURRENT_USER\\Software\\Classes\\.bmp]@&#x3D;&quot;PhotoViewer.FileAssoc.Tiff&quot;; Change Extension&#39;s File Type[HKEY_CURRENT_USER\\Software\\Classes\\.tiff]@&#x3D;&quot;PhotoViewer.FileAssoc.Tiff&quot;; Change Extension&#39;s File Type[HKEY_CURRENT_USER\\Software\\Classes\\.ico]@&#x3D;&quot;PhotoViewer.FileAssoc.Tiff&quot; 下載完成後，點擊兩下執行 出現 安全性警告 無法辨認發行者，您確定要執行這個軟體？ &gt; 執行出現 使用者帳戶控制 您是否要允許此應用程式變更您的電腦 &gt; 是出現 登錄檔編輯程式 新增資訊會意外變更或刪除值，而且會造成元件無法正確工作，如果不信任 C:\\Users\\user\\Desktop\\PhotoViewer.reg 中的資訊來源，請不要新增至登錄。是否確定要繼續？ &gt; 是 出現 登錄檔編輯程式 C:\\Users\\user\\Desktop\\PhotoViewer.reg 中的機碼和值已經成功加入登錄中 &gt; 確定 開始 &gt; 設定 &gt; 應用程式 &gt; 預設應用程式 &gt; 相片檢視器 &gt; Windows 相片檢視器 參考資料 Win10將相片檢視器為預設選項 如何在Windows 10使用傳統的「相片檢視器」程式來看圖","categories":[{"name":"電腦 / 硬體","slug":"電腦-硬體","permalink":"https://annkuoq.github.io/blog/categories/%E9%9B%BB%E8%85%A6-%E7%A1%AC%E9%AB%94/"}],"tags":[{"name":"windows","slug":"windows","permalink":"https://annkuoq.github.io/blog/tags/windows/"},{"name":"photo viewer","slug":"photo-viewer","permalink":"https://annkuoq.github.io/blog/tags/photo-viewer/"}]},{"title":"Win 10 安裝 Cmder 與 Git","slug":"install-cmder-and-git","date":"2019-12-10T14:31:46.000Z","updated":"2020-08-08T08:04:40.747Z","comments":true,"path":"2019-12-10-install-cmder-and-git/","link":"","permalink":"https://annkuoq.github.io/blog/2019-12-10-install-cmder-and-git/","excerpt":"為什麼要安裝 Cmder？ 因為要在 Windows 使用 Linux 的指令","text":"為什麼要安裝 Cmder？ 因為要在 Windows 使用 Linux 的指令 安裝步驟 前往 Cmder 官網 下載 點擊 Download Full，下載 Full 版本 (包含 Git 指令) 解壓縮 cmder.zip 將 Cmder 資料夾放到 C 槽底下 C:\\cmder 開啟檔案總管對 本機 按右鍵 &gt; 內容 &gt; 進階系統設定 &gt; 進階 &gt; 環境變數 &gt;點擊系統變數的 Path &gt; 編輯 &gt; 新增 &gt; C:\\cmder &gt; 確定 開啟 CMD，輸入 set PATH=C:，讓環境變數立即生效，不用重開機 關閉 CMD 再重啟，輸入 echo %PATH%，查看是否有增加 C:\\cmder 開啟 Cmder，出現警告視窗 1234567891011121314151617181920212223Warning!ConEmu binaries were marked as &#39;Down loaded from internet&#39;:C:\\cmder\\vendor\\conemu-maximus5\\ConEmu.exeC:\\cmder\\vendor\\conemu-maximus5\\ConEmu64.exeC:\\cmder\\vendor\\conemu-maximus5\\ConEmu\\ConEmuC.exeC:\\cmder\\vendor\\conemu-maximus5\\ConEmu\\ConEmuC64.exeC:\\cmder\\vendor\\conemu-maximus5\\ConEmu\\ConEmuCD.dllC:\\cmder\\vendor\\conemu-maximus5\\ConEmu\\ConEmuCD64.dllC:\\cmder\\vendor\\conemu-maximus5\\ConEmu\\ConEmuHIcdllC:\\cmder\\vendor\\conemu-maximus5\\ConEmu\\ConEmuHk64.dllThis may cause blocking or access denied errors!-&gt; Unblock and Continue Let ConEmu try to unblock these files You may see SmartScreen and UAC confirmations-&gt; Visit home page and Exit htt ps:&#x2F;&#x2F;conemu.github jo&#x2F;en&#x2F;Zoneld.html-&gt; Ignore and Continue You may face further warnings 點擊 Unblock and Continue 即可解決上面的錯誤 但若是你點擊了 Unblock and Continue 以外的選項就要到警告視窗提到的路徑找出這些檔案對它們點擊右鍵 &gt; 內容 &gt; 勾選 解除封鎖 &gt; 確定 12345678C:\\cmder\\vendor\\conemu-maximus5\\ConEmu.exeC:\\cmder\\vendor\\conemu-maximus5\\ConEmu64.exeC:\\cmder\\vendor\\conemu-maximus5\\ConEmu\\ConEmuC.exeC:\\cmder\\vendor\\conemu-maximus5\\ConEmu\\ConEmuC64.exeC:\\cmder\\vendor\\conemu-maximus5\\ConEmu\\ConEmuCD.dllC:\\cmder\\vendor\\conemu-maximus5\\ConEmu\\ConEmuCD64.dllC:\\cmder\\vendor\\conemu-maximus5\\ConEmu\\ConEmuHIcdllC:\\cmder\\vendor\\conemu-maximus5\\ConEmu\\ConEmuHk64.dll 優化 Cmder1. 更改提示符號 λ到 cmder &gt; vendor &gt; 用記事本開啟 clink.lua 後找到 local lambda 修改成自己喜歡的符號儲存後，重新開啟 Cmder 即可 12- local lambda &#x3D; &quot;λ&quot;+ local lambda &#x3D; &quot;$&quot; 2. 以管理員身分執行對 Cmder.exe 按右鍵 &gt; 相容性 &gt; 勾選 以系統管理員的身分執行此程式 &gt; 確定 3. 新增到右鍵清單執行以下指令後在桌面或任一資料夾按右鍵，即可看到 Cmder Here 1$ Cmder.exe &#x2F;REGISTER ALL 使用 Git 指令 嘗試 clone 一個 repo看起來沒有訪問的權限，沒有設定 SSH KEY 12345678910111213git clone git@github.com:annkuoQ&#x2F;test.gitCloning into &#39;test&#39;...The authenticity of host &#39;github.com (IP ADDRESS)&#39; can&#39;t be established.RSA key fingerprint is SHA256:nThbg6kXUpJWGl7E1IGOCspRomTxdCARLviKw6E5SY8.Are you sure you want to continue connecting (yes&#x2F;no&#x2F;[fingerprint])?yWarning: Permanently added &#39;github.com,IP ADDRESS&#39; (RSA) to the list of known hosts.git@github.com: Permission denied (publickey).fatal: Could not read from remote repository.Please make sure you have the correct access rightsand the repository exists. 設定 email 與 user name 12git config --global user.email &quot;annkuo@example.com&quot;git config --global user.name &quot;annkuo&quot; 設定 SSH KEY 123456789101112131415161718192021ssh-keygen -t rsa -C &quot;annkuo@example.com&quot;Generating public&#x2F;private rsa key pair.Enter file in which to save the key (C:\\Users\\user&#x2F;.ssh&#x2F;id_rsa):Enter passphrase (empty for no passphrase):Enter same passphrase again:Your identification has been saved in C:\\Users\\user&#x2F;.ssh&#x2F;id_rsa.Your public key has been saved in C:\\Users\\user&#x2F;.ssh&#x2F;id_rsa.pub.The key fingerprint is:SHA256:xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx annkuo@example.comThe key&#39;s randomart image is:+---[RSA 2048]----+|. XXXXXXX.. ||.XXXXXXX. . ||..XXXXX. . || XXXXXXXX || X XXXX || X XX X || X X X || XXX X || XXX |+----[SHA256]-----+ 到 GitHub &gt; Setting &gt; SSH and GPG keys &gt; New SSH Key找到剛剛在 C:\\Users\\user\\.ssh 生成的 id_rsa.pub用記事本打開，把內容複製到 Key 欄位 (忽視 Title) &gt; Add SSH key 檢查是否成功驗證身分 12ssh -T git@github.comHi annkuoQ! You&#39;ve successfully authenticated, but GitHub does not provide shell access. 再次 clone repo 成功 123456789git clone git@github.com:annkuoQ&#x2F;test.gitCloning into &#39;test&#39;...Warning: Permanently added the RSA host key for IP address &#39;(IP ADDRESS)&#39; to the list of known hosts.remote: Enumerating objects: 486, done.remote: Counting objects: 100% (486&#x2F;486), done.remote: Compressing objects: 100% (377&#x2F;377), done.remote: Total 486 (delta 79), reused 482 (delta 77), pack-reused 0Receiving objects: 100% (486&#x2F;486), 784.38 KiB | 752.00 KiB&#x2F;s, done.Resolving deltas: 100% (79&#x2F;79), done. 參考資料 Cmder GitHub Wiki cmder waring conEmu binaries were marked as ‘Downloaded from internet’ GitHub Help - Connecting to GitHub with SSH GitHub Help - Error: Permission denied (publickey) git遇到的问题之“Please make sure you have the correct access rights and the repository exists.”","categories":[{"name":"資工 / 程設","slug":"資工-程設","permalink":"https://annkuoq.github.io/blog/categories/%E8%B3%87%E5%B7%A5-%E7%A8%8B%E8%A8%AD/"}],"tags":[{"name":"cmder","slug":"cmder","permalink":"https://annkuoq.github.io/blog/tags/cmder/"},{"name":"git","slug":"git","permalink":"https://annkuoq.github.io/blog/tags/git/"}]},{"title":"關於旅遊企劃的二三事","slug":"how-to-plan-a-family-vacation","date":"2019-08-03T16:31:46.000Z","updated":"2020-09-22T12:45:43.587Z","comments":true,"path":"2019-08-04-how-to-plan-a-family-vacation/","link":"","permalink":"https://annkuoq.github.io/blog/2019-08-04-how-to-plan-a-family-vacation/","excerpt":"家旅至今走過十九個年頭～父母也開始交棒給孩子們舉辦輪到的那一家總是壓力特別大XD做出好的活動企劃並不容易不過現在企劃薪水好像不高 (誤)","text":"家旅至今走過十九個年頭～父母也開始交棒給孩子們舉辦輪到的那一家總是壓力特別大XD做出好的活動企劃並不容易不過現在企劃薪水好像不高 (誤) 回到正題！此篇目的是想整理出在規劃旅遊時需要注意到哪些細節咱們就開始吧～ 背景目標對象 參加人數：至多 26 人 年齡層：5 歲 - 65 歲 勇健情況：約 1 / 3 的人有膝蓋相關問題 旅遊時間 考慮學生身分，「寒暑假」為主 考慮社會新鮮人沒假休，「三到四天」為主 旅程目的 聯繫家族感情 遠離討厭的老闆與同事 放鬆心情與調整腳步 拍網美照炫耀與以及更換新頭貼 瘋狂蝦拼與覓食來紓壓 資訊分享工具Facebook 請將行程表、旅遊資訊等檔案上傳到 臉書社團除了能避免 LINE 檔案過期，而無法下載的問題也可永久保存，讓想來第二次的人能快速取得資訊LINE 每次用嘴巴公布的集合或晨喚時間等小提醒，請順手 PO 到 賴群組 上可以避免口耳相傳的假新聞，以及讓有金魚腦的家人更安心相簿 LINE 相簿: 如果直接上傳圖片到 LINE，過一陣子會過期而無法開啟 Facebook: 不論相片或相簿皆無過期的問題，會永遠保存 雲端空間: 保存最原始的畫質，避免你美麗的臉龐上有奇怪的顆粒 主要規劃項目景點 導覽相關資源 a. 導覽影片可事先預約 當地遊客中心 的影片，或是查詢播放場次 b. 導覽員國家風景區 通常都有導覽員可供預約，當然你也可以帶著小蜜蜂自己講 c. 社區發展協會當地的 社區發展協會 會有更深入的文化導覽與私房景點，另也有提供行程規劃 d. 民宿 / 餐廳老闆幽默風趣的 民宿 / 餐廳老闆 總能說出意想不到的人文生態小故事 天堂路 如果該景點步道長度頗長，或有樓梯與斜坡，請預估更多時間來讓大家完成任務 也可在附近尋找遊客中心或室內場館，讓想休息的家人能夠放榮譽假 停車位 沒停好車，怎麼下來逛！？請查好每個景點旁的停車資訊，不然就犧牲司機吧 洗手間 上車睡覺下車尿尿 照相 團體照 (花費五分鐘)請事先找好適合拍團照的著名地標，並通知攝影師，提早看構圖與架設腳架 個人照 (花費半小時)美景當前，不拍百張不甘心 交通 里程與時間：善用 Google 地圖 來預估路程與開車時間 壅塞時段：避開塞車時段，提早出發 休息站：司機小盹、乘客解放、95 加滿 住宿 地理位置：美景或許比便利更加吸引人 分房：有人愛安靜、有人愛監視小孩、有人愛跟老婆同一張床 盥洗用具：若沒提供請提早告知 冰箱：沒有冰塊、冰啤酒、冰淇淋怎麼活 床墊：軟硬適中，脊椎放鬆 請提早半年前預訂民宿入住前一小時，可再次打電話確認 飲食 合菜 價格：一桌約三千塊 數量：約十菜一湯 菜色：厲害的人可以自行組合菜色，不厲害就請餐廳搭配 點菜秘訣: 特色招牌菜、多樣化食材、不同料理手法 自理 請提供美食地圖攻略給大家，讓人人肚量都很大 提早半年前預訂餐廳入席前一小時，可再次打電話確認請關懷吃 素食 的家人 其他注意項目醫療 可事先查詢沿途上的醫療院所，列在旅遊資訊檔案中讓身體不適的人可快速前往特定醫院 假日可能只有急診無門診 另外也可提供藥局位置，或請大家自備常用藥 解熱鎮痛劑 綜合感冒藥 暈車藥 腸胃用藥 簡易外傷急救包 慢性病用藥 備案 可能天氣不佳、可能景點關閉、可能上個景點比你想像中還快結束這時應前往備案景點，讓大家有個好去處 伴手禮 除了直接 Google 當地伴手禮也可查詢 當地觀光局 舉辦的伴手禮大賽有誰得獎 支出費用 請留下所有的單據，以便報帳 交通：自駕油錢、船票、機票，留下發票！ 住宿：入住前的保證金，索取收據證明有訂房！入住後的餘款，索取收據！ 餐廳：吃完飯後付款，索取收據！ 娛樂：各種入園門票！","categories":[{"name":"企劃 / 行銷","slug":"企劃-行銷","permalink":"https://annkuoq.github.io/blog/categories/%E4%BC%81%E5%8A%83-%E8%A1%8C%E9%8A%B7/"}],"tags":[{"name":"travel","slug":"travel","permalink":"https://annkuoq.github.io/blog/tags/travel/"}]},{"title":"LINE Taiwan TechPulse 2018 開發者大會","slug":"line-taiwan-techpulse-2018","date":"2018-12-21T15:10:11.000Z","updated":"2021-02-03T14:25:07.254Z","comments":true,"path":"2018-12-21-line-taiwan-techpulse-2018/","link":"","permalink":"https://annkuoq.github.io/blog/2018-12-21-line-taiwan-techpulse-2018/","excerpt":"同事告知最近有一個 LINE 的開發者說明會覺得很酷就報名了雖然不懂程式，英文也不好結果整間公司只有我抽到門票哈哈","text":"同事告知最近有一個 LINE 的開發者說明會覺得很酷就報名了雖然不懂程式，英文也不好結果整間公司只有我抽到門票哈哈 報名與報到2018/11/29 到 官網 點擊 立即報名 用 LINE 掃描頁面上的 QR CODE 並加 LINE TECHPULSE 2018 官方帳號好友 用聊天的方式填報名資料 2018/12/20 活動前一天，收到報到流程的說明 向⾨⼝的⼯作⼈員出⽰報到成功的訊息，即可進入會場～ 會場佈置 接著在服務台領取識別證，材質是厚紙板正⾯寫個 ⼤G (GUEST)，背⾯是⼤會 LOGO⼯作⼈員的吊牌則是 ⼤ S (STAFF)這個設計可以在很遠的地⽅就清楚辨認⾝分 它是⼀個兩⼈對戰的互動遊戲先掃螢幕上的 QR Code 後，就會導⾄遊戲畫⾯等兩個⼈的頭貼都出現在螢幕上，就可以開始遊戲 我輸得很慘哈哈… 插曲：跟我比賽的路⼈⽤⼿機內建的掃描器掃 QR Code，都掃不進去最後用 LINE 的掃描器才成功 它是⼀個有關物聯網的遊戲只要點擊 LINE 的按鈕就可以控制路⼝的號誌燈 (⼩紅⼈變⼩綠⼈) 也就是透過 LIFF 選單來啟動 LINE THINGS，無需撰寫任何藍牙 APP僅透過樹莓派連接燈號裝置，再由 LIFF 的 Web 藍牙傳送資料來控制號誌燈 它跟第⼆關⼀樣是物聯網的遊戲在 LINE 上輸入正確的密碼後⾦庫的電磁鎖就可打開，不⽤使⽤實體按鍵 也就是先用 LIFF 呈現解鎖介面，再透過 LINE THINGS 操控 IOT 金庫設備由 LIFF 直接傳送資料，控制連接樹莓派的繼電器 手機集滿三個徽章後，就收到 Conpon 推播到服務台請⼯作⼈員點擊 兌換 按鈕這張 Coupon 就失效囉 會議廳有三個投影布幕前排座位附有桌⼦，後排則只有椅⼦最後⾯有⼀個放攝影機的⾼檯，以及⼀些看起來很像⾳控的⼈員 主持⼈開場說明這次⼤會主題為「串連」，包含 ⼈與⼈ &amp; ⼈與資訊 ChatBot 機器人不只是聊天機器⼈，還能購物、訂餐、叫⾞等 1. 購物 Quick reply 快速回覆使⽤者只需點擊按鈕即可回應訊息避免⽤⼾輸入錯誤的資料 LIFF 把 Web 的商品列出來 LINE Pay 付款 Flex message 優化訂單訊息 LIFF 把 Web 的訂單呈現 這就是完整的 Chatbot 服務⽤ Line 登入各種應⽤程式、結合各種 API讓你不⽤離開聊天室也能完成所有事情 2. 辦活動 報到⽤ Beacon 與 藍芽 收推播，或掃描 QR Code還沒踏進⼤⾨就報到好了 Rich Menu即時個⼈化查詢，不同⾝份顯示不同選單 薪資入帳通知 詢問優惠客服 參加活動報名 刷卡消費通知 繳費通知提醒 Switcher API⼀開始先⽤機器⼈客服，機器⼈無法解決就通知真⼈訊息格式可以⽤文字或語⾳，完全不⽤離開聊天室 Mobile Payment 行動支付1. Line Pay ⾦流入⼝把其他⾴⾯改版成「錢包」錢包可做到的事情都放在這個⾴⾯ IOT 物聯網1. LINE BeaconBeacon 是⼀個藍牙發射裝置只要⾛到 LINE Beacon 的發送範圍，就可收到推播 改變 在⼀個平台管理所有物聯網裝置 使⽤ BLE 協定 可以雙向溝通 案例⼀ 當家中的⾨被打開，LINE 將發推播通知你且可傳送監視器影片給你 案例⼆ 掃描 QR Code，找到體重計裝置，並且配對藍牙站上體重計後，LINE 將發推播體重數字給你 政府機關的便民服務1. 台北市政府打破公部⾨流程，沒有採購、也沒有教育訓練只有規定辦法，限制何種層級的的事情不能放上 LINE 原本是把 LINE 當成訊息通知平台，也就是⼤聲公但因為局處很多，訊息⼀天就上百則，於是很多⼈取消好友 QQ ⺠眾痛點看不懂、⽤不到、沒跟到、查不到 改變把業務分類改成服務分類，提供個⼈化訊息 (訂閱) 即時通報哪裡淹⽔、寒流溫度、地震、⽔庫放流、停班停課 點擊 Rich Menu 的訂閱⽰警開啟 WebView，點選要訂閱的地區和⽰警類型即可 災情回報當有重⼤災情時，Rich Menu 會多⼀個災情回報按鈕你可以⽤文字或影片訊息來回報，它會⾃動帶入 GPS 和時間 Agile Testing 敏捷測試品質控管是所有⼈員責任，不是只有 QA 問題 測試時間不夠 修 bug 要很多時間 修好⼜要重複的測，⽽且相關的功能都要測 QA 像拿到⼀個⿊盒⼦，不知改了哪裡 改變 QA 要看 Code 改了什麼 (平常就要監控) 瞭解整體架構，決定重點測試項⽬，避免重復測試 團隊互相幫忙 總結 Control Change Scope 監控變更的範圍 Keep Testing 持續測試 DevOps 開發和維運團隊整合 Work Closely with Developers 與開發人員緊密合作 Less Repetitive Work &amp; More Agilie 減少重複工作，更敏捷 LINE 新創團隊官⽅帳號 2.0 計畫 不必經過審核就能申請 採⽤「以量計費」模式 可使⽤ Messaging API LINE Protostar 新星計畫提供新創團隊協助 (⾏銷.稅務.法律.創投.募資等) 資源 無上限好友的官⽅帳號 (LINE Business Connect) 開源 API 與 SDK 外有 中華開發創新加速器 專業經理⼈，內有 LINE 有定期商務會議與技術會議 資⾦ 可被 LINE 直接投資，或變你的股東 可便宜續約新星計畫 案例⼀ - 潔客幫 家政服務平台公開清潔⼈員評價，員⼯透過五星評價來加薪Chatbot 24⼩時線上預約，Line Pay 線上付款 案例⼆ - 跑跑腿 即時⼈⼒媒合服務輸入地址、填寫要做什麼事情、選擇任務執⾏時間幫你買交換聖誕禮物送朋友、取貨、遛狗、繳費、買票、代辦都可以 開發者社群因為語⾔、平台、遇到的情境的不同⼯程師常找不到⼈討論，分享是義務！ 網路社群Line Engineering (是中文!)LINE 開發者官⽅社群 (LINE 開發社群活動及職缺訊息)LINE Developers Group Taiwan (臉書社團)LINE Developer Community (LINE API Expert 專家給你問)Line developer website (文件)Line GitHub (開源碼) 聚會LINE Developer Meetup (開發者⼩聚) 比賽HACK 2018 (奪冠隊伍將以台灣代表隊⾝分參加 BOOT AWARDS)LINE BOOT AWARDS (跨國開發者⼤賽) 講座Campus Talk (校園講座)TechPulse (台灣開發者⼤會) 後記間諜開發者不懂開發，只是來體驗大會的氛圍 😎 餐點早上是飲料餅乾區，中午變麵包區超多人排隊的，我是跑去吃便利商店的麥片飲和茶葉蛋哈哈 參加禮送出問卷後，收到了 Coupon 推播帶著⼿機去找服務台，即可領取參加禮~","categories":[{"name":"資工 / 程設","slug":"資工-程設","permalink":"https://annkuoq.github.io/blog/categories/%E8%B3%87%E5%B7%A5-%E7%A8%8B%E8%A8%AD/"}],"tags":[{"name":"LINE","slug":"LINE","permalink":"https://annkuoq.github.io/blog/tags/LINE/"}]},{"title":"烏克麗麗如何彈 Do Re Mi","slug":"ukulele-do-re-mi-scales","date":"2014-02-01T05:51:43.000Z","updated":"2020-12-28T12:14:12.979Z","comments":true,"path":"2014-02-01-ukulele-do-re-mi-scales/","link":"","permalink":"https://annkuoq.github.io/blog/2014-02-01-ukulele-do-re-mi-scales/","excerpt":"想要知道怎麼在烏克麗麗上彈 Do Re Mi首先要知道每一條弦的空弦音你只要會調音，就一定知道空弦音","text":"想要知道怎麼在烏克麗麗上彈 Do Re Mi首先要知道每一條弦的空弦音你只要會調音，就一定知道空弦音 空弦音 指板上的每個音格都是一個半音半音 + 半音 = 全音所以兩格是一個全音 推算指板上的音我們知道第一弦空弦音是 A也知道 A 跟 B 之間的距離是一個 全音一個全音又等於 兩格所以 B 就會在第一弦 第二格 再來B 和 C 距離一個半音 (一格) =&gt; C 在第三格C 和 D 距離一個全音 (兩格) =&gt; D 在第五格D 和 E 距離一個全音 (兩格) =&gt; E 在第七格E 和 F 距離一個半音 (一格) =&gt; F 在第八格F 和 G 距離一個全音 (兩格) =&gt; G 在第十格G 和 A 距離一個全音 (兩格) =&gt; A 在第十二格 以此類推，你就能知道指板上所有的音 食指負責第一格中指負責第二格無名指負責第三格 Do 是第三弦空弦音 Re 是中指按第三弦第二格 Mi 是第二弦空弦音 Fa 是食指按第二弦第一格 Sol 是無名指按第二弦第三格 La 是第一弦空弦音 Ti 是中指按第一弦第二格 Do 是無名指按第一弦第三格 高把位 Do Re Mi很多歌都會超過一個八度 (低音 Do 到 高音 Do)但烏克麗麗的結構的限制比較沒辦法彈出低音，解決的方法有: 換 Low G 弦 移調 移動你的手 前兩個對初學者可能有點難所以我介紹第三個首先把剛在指板上推算的音拿出來然後上個色","categories":[{"name":"音樂 / 樂器","slug":"音樂-樂器","permalink":"https://annkuoq.github.io/blog/categories/%E9%9F%B3%E6%A8%82-%E6%A8%82%E5%99%A8/"}],"tags":[{"name":"ukulele","slug":"ukulele","permalink":"https://annkuoq.github.io/blog/tags/ukulele/"}]},{"title":"暖身操與爬格子","slug":"hand-stretch-exercises","date":"2014-01-19T15:09:43.000Z","updated":"2020-12-28T12:14:12.979Z","comments":true,"path":"2014-01-19-hand-stretch-exercises/","link":"","permalink":"https://annkuoq.github.io/blog/2014-01-19-hand-stretch-exercises/","excerpt":"彈琴之前要做一些熱身練習就像運動之前的拉筋一樣可以讓你的手指更靈活也比較不會受傷喔","text":"彈琴之前要做一些熱身練習就像運動之前的拉筋一樣可以讓你的手指更靈活也比較不會受傷喔 暖身操繞肩雙手放鬆自然垂下肩膀聳起向後繞圈個幾次，再向前繞個幾次放鬆你的肩胛骨肌肉 轉手臂慢慢向後轉整支左手臂，畫幾個大圈，再向前轉換右手臂慢慢向後轉，再向前轉好像游自由式的感覺 擴胸雙手向後伸後，掌心對掌心十指交扣慢慢向後拉，停個幾秒再向上拉，停個幾秒再向下拉，停個幾秒 轉手腕兩隻手可以一起轉慢慢往順/逆時針轉幾圈然後再換逆/順時針轉幾圈 壓四根手指 跟上一個動作很像但一次只壓一根手指大拇指也要喔 分開手指 按的位置要在金屬條 (琴衍) 旁邊，這樣會比較省力 爬完四個音，手指頭才可以”翹”起來 速度和力量要穩定一致，可用節拍器協助練習 縱向運動固定在前四格，但不同條弦一次只能動一根手指頭 - 24 種指法除了上面的練習，其實還有很多種跑法像斜的、跨弦、跨格子 不同跑法，再搭配下面 24 種指法真是練都練不完呢(1 = 食指、2 = 中指、3 = 無名指、4 = 小指)","categories":[{"name":"音樂 / 樂器","slug":"音樂-樂器","permalink":"https://annkuoq.github.io/blog/categories/%E9%9F%B3%E6%A8%82-%E6%A8%82%E5%99%A8/"}],"tags":[{"name":"ukulele","slug":"ukulele","permalink":"https://annkuoq.github.io/blog/tags/ukulele/"}]},{"title":"烏克麗麗的技巧記號與反覆記號","slug":"ukulele-tab-symbols-and-repetition","date":"2013-08-11T15:24:43.000Z","updated":"2020-12-28T12:14:12.979Z","comments":true,"path":"2013-08-11-ukulele-tab-symbols-and-repetition/","link":"","permalink":"https://annkuoq.github.io/blog/2013-08-11-ukulele-tab-symbols-and-repetition/","excerpt":"技巧記號四線譜上有哪些常見的技巧記號呢","text":"技巧記號四線譜上有哪些常見的技巧記號呢 1. 搥弦 (Hammer-on)記號是 H用左手指快速擊弦所發出的聲音 左手食指按第一弦第五格，無名指按第一弦第七格 右手彈第一弦 左手無名指勾第一弦 (發出第一弦第五格的音) 3. 滑弦 (Slide)記號是 S用左手壓弦後快速的橫向滑動 第二個: 從高的音滑到低的音 左手按第一弦第七格 右手彈第一弦 左手快速滑動到第一弦第五格 (發出第一弦第七格到第五格的連音) 4. 推弦與鬆弦 (Bend &amp; Release)推弦記號是 B用左手把弦往上推使音變高 鬆弦記號是 R把推好的弦放鬆讓音變回來 左手按第一弦第三格 右手往下刷 右手快速碰弦讓聲音消失 (恰恰聲) 6. 悶音 (Mute)記號是箭頭加上一個空心圓點先把音悶住在撥弦 左手按第一弦第三格 右手從第四弦慢慢撥到第一弦 反覆記號1. 左右蓋子 &lt;img src=”./repeat_sign_1.jpg”” width=”50px”/&gt;當看到它時就要重複蓋子裡的所有小節 答案是: 1 2 3 1 4 5 3. Da Capo &lt;img src=”./da_capo.jpg”” width=”100px”/&gt;當在小節上方看到 Da Capo或在小節下方看到 (D.C.)代表要從頭彈起 答案是: 1 2 3 4 5 6 4 5 6 5. Coda &lt;img src=”./coda.jpg”” width=”80px”/&gt;通常譜重複到第二遍時，烏龜才會出現所以當看到它時，就跳到下一個烏龜處彈起","categories":[{"name":"音樂 / 樂器","slug":"音樂-樂器","permalink":"https://annkuoq.github.io/blog/categories/%E9%9F%B3%E6%A8%82-%E6%A8%82%E5%99%A8/"}],"tags":[{"name":"ukulele","slug":"ukulele","permalink":"https://annkuoq.github.io/blog/tags/ukulele/"}]},{"title":"烏克麗麗的和弦圖與四線譜","slug":"ukulele-read-chord-and-tab","date":"2013-08-10T14:19:43.000Z","updated":"2020-12-28T12:14:12.979Z","comments":true,"path":"2013-08-10-ukulele-read-chord-and-tab/","link":"","permalink":"https://annkuoq.github.io/blog/2013-08-10-ukulele-read-chord-and-tab/","excerpt":"和弦圖和弦圖有直的也有橫的其實它就是烏克麗麗的指板","text":"和弦圖和弦圖有直的也有橫的其實它就是烏克麗麗的指板 和弦圖上方的英文是和弦名稱黑點點是要按的位置 C無名指 按第一弦第三格 Am中指 按第四弦第二格 F食指 按第二弦第一格中指 按第四弦第二格 G7食指 按第二弦第一格中指 按第三弦第二格無名指 按第一弦第二格 四線譜 TAB (Tablature)它其實也是烏克麗麗的指板把烏克麗麗面向自己就和 TAB 一樣了 左邊 TAB 在第二弦上有個 1代表要按第二弦的第一格第一格通常由食指負責所以就是左手食指按住第二弦第一格，右手彈第二弦 右邊 TAB 在第四弦有個 0代表空弦音不用按所以只需要用右手彈第四弦即可 2. 練習二 - 彈奏順序 第一個: 同時按第一弦第二格和第二弦第三格，右手撥第一二弦第二個: 同時按第一弦第四格和第二弦第五個，右手撥第一二弦第三個: 同時按第二弦第二格和第三弦第二格，右手撥第二三弦第四個: 同時按第三弦第三格和第四弦第一格，右手撥第三四弦 4. 練習四 - 和弦 箭頭就是指刷的方向它有四個箭頭 上下上下 但箭頭往上不代表手要往上刷因為四線譜是把烏克麗麗面對自己的樣子 試試看把有響孔那面轉過來面對自己，然後往上刷接著把響孔轉回去對外，就變成往下刷了所以手的方向跟譜是相反的 第一個左手按 F 和弦，右手往下刷 第二個左手按 F 和弦，右手往上刷 第三個左手按 C 和弦，右手往下刷 第四個左手按 C 和弦，右手往上刷 6. 練習六 - ㄇ 與 V","categories":[{"name":"音樂 / 樂器","slug":"音樂-樂器","permalink":"https://annkuoq.github.io/blog/categories/%E9%9F%B3%E6%A8%82-%E6%A8%82%E5%99%A8/"}],"tags":[{"name":"ukulele","slug":"ukulele","permalink":"https://annkuoq.github.io/blog/tags/ukulele/"}]},{"title":"音符與節拍","slug":"music-notes-and-rhythm","date":"2013-08-09T09:42:43.000Z","updated":"2020-12-28T12:14:12.963Z","comments":true,"path":"2013-08-09-music-notes-and-rhythm/","link":"","permalink":"https://annkuoq.github.io/blog/2013-08-09-music-notes-and-rhythm/","excerpt":"在讀譜之前要先認識音符和拍值","text":"在讀譜之前要先認識音符和拍值 音符 &amp; 休止符音符 由符頭、符桿、符尾組成 全音符 x 1 = 二分音符 x 2 = 四分音符 x 4 = 八分音符 x 8 = 十六分音符 x 16 節拍練習一開始初學者不熟會拍子不穩，所以一定要用節拍器先設定為 60 BPMBPM (beats per minute) 是每分鐘的拍數 全音符練習這是五線譜，最前面是高音譜記號44 是拍號，拍號是指歌曲每小節的拍數，通常寫在譜的最前面分母 4 代表以 四分音符 為一拍分子 4 代表每一小節有 四拍這數字是可以換的，只要知道分母分子代表的意思就好囉 彈四遍的話就是嘴巴念 1、2、3、4 1、2、3、4 1、2、3、4 1、2、3、4右手刷 1 - 3 - 1 - 3 - 1 - 3 - 1 - 3 -嘴念了 16 次，手刷了 8 次 四分音符練習四分音符的長度是一拍所以四個四分音符就有四拍 兩個八分音符在一起時，符尾可相連，變成ㄇ字型 ♫兩個十六分也可以喔，就變有兩條槓 ♬ 彈四遍的話就是嘴巴念 1 &amp; 2 &amp; 3 &amp; 4 1 &amp; 2 &amp; 3 &amp; 4 1 &amp; 2 &amp; 3 &amp; 4 1 &amp; 2 &amp; 3 &amp; 4右手刷 1 &amp; 2 &amp; 3 &amp; 4 1 &amp; 2 &amp; 3 &amp; 4 1 &amp; 2 &amp; 3 &amp; 4 1 &amp; 2 &amp; 3 &amp; 4嘴念了 32 次，手刷了 32 次","categories":[{"name":"音樂 / 樂器","slug":"音樂-樂器","permalink":"https://annkuoq.github.io/blog/categories/%E9%9F%B3%E6%A8%82-%E6%A8%82%E5%99%A8/"}],"tags":[{"name":"ukulele","slug":"ukulele","permalink":"https://annkuoq.github.io/blog/tags/ukulele/"}]},{"title":"烏克麗麗的持琴姿勢/彈奏方式","slug":"hold-and-strum-ukulele","date":"2013-07-29T15:46:43.000Z","updated":"2020-12-28T12:14:12.963Z","comments":true,"path":"2013-07-29-hold-and-strum-ukulele/","link":"","permalink":"https://annkuoq.github.io/blog/2013-07-29-hold-and-strum-ukulele/","excerpt":"烏克麗麗是一個很隨興的樂器所以沒有一定的姿勢或方式最重要的就是讓自己感覺到舒服自在就好囉","text":"烏克麗麗是一個很隨興的樂器所以沒有一定的姿勢或方式最重要的就是讓自己感覺到舒服自在就好囉 持琴姿勢一般首先坐挺，不要駝背 右手抓起琴身，擺到胸口的位置 右手臂和身體順勢夾住琴身，琴頭會比琴身高 左手虎口輕輕扣住琴頸上方的位置，不用用力注意是虎口而不是手掌貼住可以利用虎口當支點，轉轉看手腕是否很靈活 或者把琴身放在腿上只要你喜歡就可以囉~ 背帶 (掛勾式) 把背帶掛到脖子上 勾勾扣住響孔 用彎曲的右手臂固定住琴身，左手輕輕支撐住琴頭","categories":[{"name":"音樂 / 樂器","slug":"音樂-樂器","permalink":"https://annkuoq.github.io/blog/categories/%E9%9F%B3%E6%A8%82-%E6%A8%82%E5%99%A8/"}],"tags":[{"name":"ukulele","slug":"ukulele","permalink":"https://annkuoq.github.io/blog/tags/ukulele/"}]},{"title":"烏克麗麗的調音/C大調音階","slug":"tune-ukulele-and-c-major-scale","date":"2013-07-25T14:27:43.000Z","updated":"2020-12-28T12:14:12.963Z","comments":true,"path":"2013-07-25-tune-ukulele-and-c-major-scale/","link":"","permalink":"https://annkuoq.github.io/blog/2013-07-25-tune-ukulele-and-c-major-scale/","excerpt":"音的名字在調音之前呢我們要先知道每個音的名字因為調音器上面只會顯示音名不會寫 Do Re Mi","text":"音的名字在調音之前呢我們要先知道每個音的名字因為調音器上面只會顯示音名不會寫 Do Re Mi 那什麼是音名呢喔~原來音的表現方式有很多種像是 音名 的 C D E F G A B或 唱名 的 Do Re Mi Fa Sol La Ti或 簡譜 的 1 2 3 4 5 6 7 C 大調音階 C 加一個半音等於 C# 或 Db再加一個半音等於 D再加一個半音等於 D# 或 Eb再加一個半音等於 E再加一個半音等於 F再加一個半音等於 F# 或 Gb再加一個半音等於 G再加一個半音等於 G# 或 Ab再加一個半音等於 A再加一個半音等於 A# 或 Bb再加一個半音等於 B再加一個半音等於 C這樣就是一個八度 搭配著鋼琴邊彈邊看，有沒有更懂一點了呢懂了之後，就可以開始調音囉 在我們彈奏之前第一件事就是要調音首先我們要先認識弦的位置離我們最遠 (最細) 的弦是 第一弦 A再來是 第二弦 E、第三弦 C、第四弦 G這也要背起來喔~ 了解之後呢把調音器夾在琴頭，並打開電源 (440 Hz)通常有兩種模式一種是震動，一種是麥克風收音震動比較不會受到外界干擾 撥一下要調的弦若顯示的音名比我們的目標低，就 轉緊 弦紐，把音 調高若顯示比我們目標高，就 轉鬆 弦紐，把音 調低 除了要看音名指針也要對到中間若指針在 左邊，就 轉緊調高若指針在 右邊，就 轉鬆調低","categories":[{"name":"音樂 / 樂器","slug":"音樂-樂器","permalink":"https://annkuoq.github.io/blog/categories/%E9%9F%B3%E6%A8%82-%E6%A8%82%E5%99%A8/"}],"tags":[{"name":"ukulele","slug":"ukulele","permalink":"https://annkuoq.github.io/blog/tags/ukulele/"}]},{"title":"烏克麗麗的歷史/種類/結構","slug":"ukulele-history-types-anatomy","date":"2013-07-22T15:20:43.000Z","updated":"2020-12-28T12:14:12.947Z","comments":true,"path":"2013-07-22-ukulele-history-types-anatomy/","link":"","permalink":"https://annkuoq.github.io/blog/2013-07-22-ukulele-history-types-anatomy/","excerpt":"歷史在很久很久以前 (老套開頭)就是在 1879 年 8 月 23 日那天有 419 位的葡萄牙移民在夏威夷上岸在這當中還包含了專業的製琴師:Manuel Nunes, Joao Fernandes, Augustine Dias","text":"歷史在很久很久以前 (老套開頭)就是在 1879 年 8 月 23 日那天有 419 位的葡萄牙移民在夏威夷上岸在這當中還包含了專業的製琴師:Manuel Nunes, Joao Fernandes, Augustine Dias 在航行超過四個月，約 15000 公里之後Joao Fernandes 拿起家鄉的傳統樂器 (Braguinha)開始高唱家鄉的傳統歌謠 當地的夏威夷人不但覺得這種琴音色優美還對演奏者飛快的手指頭在指板上移動跳躍感到驚訝簡直就像跳躍的跳蚤一樣用當地語言把 跳躍的跳蚤 說出來，就是現在的烏克麗麗囉 還有另外一種說法是Liliuokalani 女王 覺得這個樂器是葡萄牙人為當地帶來的禮物用夏威夷話來說，UKU 是「禮物」，LELE 是「來」的意思結合在一起就成為現在的 UKULELE 囉 種類 Soprano (21吋) Concert (23吋) Tenor (26吋) Baritone (30吋) Size 越大，音格數越多，能彈的音也越多 構造 琴頭 - 品牌 LOGO 弦鈕 &amp; 弦栓 - 調整弦的鬆緊度與高低音 上弦枕 &amp; 下弦枕 &amp; 琴橋 - 把四條弦固定住 琴頸 - 很長的脖子 琴衍 - 金屬條 指板 &amp; 音格 - 手指頭按的地方 指位記號 - 指版上的點點，快速辨識是在哪一格 音箱 &amp; 響孔 - 聲音發出來的地方","categories":[{"name":"音樂 / 樂器","slug":"音樂-樂器","permalink":"https://annkuoq.github.io/blog/categories/%E9%9F%B3%E6%A8%82-%E6%A8%82%E5%99%A8/"}],"tags":[{"name":"ukulele","slug":"ukulele","permalink":"https://annkuoq.github.io/blog/tags/ukulele/"}]}]}